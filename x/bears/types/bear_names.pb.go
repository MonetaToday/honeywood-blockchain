// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/bear_names.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BearNames struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BearId uint64 `protobuf:"varint,2,opt,name=bearId,proto3" json:"bearId,omitempty"`
}

func (m *BearNames) Reset()         { *m = BearNames{} }
func (m *BearNames) String() string { return proto.CompactTextString(m) }
func (*BearNames) ProtoMessage()    {}
func (*BearNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d67ef60f6cadd79, []int{0}
}
func (m *BearNames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BearNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BearNames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BearNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BearNames.Merge(m, src)
}
func (m *BearNames) XXX_Size() int {
	return m.Size()
}
func (m *BearNames) XXX_DiscardUnknown() {
	xxx_messageInfo_BearNames.DiscardUnknown(m)
}

var xxx_messageInfo_BearNames proto.InternalMessageInfo

func (m *BearNames) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BearNames) GetBearId() uint64 {
	if m != nil {
		return m.BearId
	}
	return 0
}

func init() {
	proto.RegisterType((*BearNames)(nil), "MonetaToday.honeywood.bears.BearNames")
}

func init() { proto.RegisterFile("bears/bear_names.proto", fileDescriptor_1d67ef60f6cadd79) }

var fileDescriptor_1d67ef60f6cadd79 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x4a, 0x4d, 0x2c,
	0x2a, 0xd6, 0x07, 0x91, 0xf1, 0x79, 0x89, 0xb9, 0xa9, 0xc5, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0xd2, 0xbe, 0xf9, 0x79, 0xa9, 0x25, 0x89, 0x21, 0xf9, 0x29, 0x89, 0x95, 0x7a, 0x19, 0xf9,
	0x79, 0xa9, 0x95, 0xe5, 0xf9, 0xf9, 0x29, 0x7a, 0x60, 0xd5, 0x4a, 0xe6, 0x5c, 0x9c, 0x4e, 0xa9,
	0x89, 0x45, 0x7e, 0x20, 0xf5, 0x42, 0x42, 0x5c, 0x2c, 0x20, 0x8d, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0xb6, 0x90, 0x18, 0x17, 0x1b, 0x48, 0xa5, 0x67, 0x8a, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x4b, 0x10, 0x94, 0xe7, 0xe4, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x7a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x48, 0x56, 0xeb,
	0x7b, 0x80, 0xac, 0x0e, 0xcf, 0xcf, 0x4f, 0xd1, 0xaf, 0xd0, 0x87, 0x38, 0xb5, 0xa4, 0xb2, 0x20,
	0xb5, 0x38, 0x89, 0x0d, 0xec, 0x4c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x50, 0x7d,
	0xc7, 0xc0, 0x00, 0x00, 0x00,
}

func (m *BearNames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BearNames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BearNames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BearId != 0 {
		i = encodeVarintBearNames(dAtA, i, uint64(m.BearId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBearNames(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBearNames(dAtA []byte, offset int, v uint64) int {
	offset -= sovBearNames(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BearNames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBearNames(uint64(l))
	}
	if m.BearId != 0 {
		n += 1 + sovBearNames(uint64(m.BearId))
	}
	return n
}

func sovBearNames(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBearNames(x uint64) (n int) {
	return sovBearNames(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BearNames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBearNames
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BearNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BearNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBearNames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBearNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearId", wireType)
			}
			m.BearId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BearId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBearNames(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBearNames
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBearNames(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBearNames
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBearNames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBearNames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBearNames
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBearNames
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBearNames
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBearNames        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBearNames          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBearNames = fmt.Errorf("proto: unexpected end of group")
)
