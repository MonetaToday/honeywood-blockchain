// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetBearNamesRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetBearNamesRequest) Reset()         { *m = QueryGetBearNamesRequest{} }
func (m *QueryGetBearNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBearNamesRequest) ProtoMessage()    {}
func (*QueryGetBearNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{2}
}
func (m *QueryGetBearNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBearNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBearNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBearNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBearNamesRequest.Merge(m, src)
}
func (m *QueryGetBearNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBearNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBearNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBearNamesRequest proto.InternalMessageInfo

func (m *QueryGetBearNamesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetBearNamesResponse struct {
	BearNames BearNames `protobuf:"bytes,1,opt,name=bearNames,proto3" json:"bearNames"`
}

func (m *QueryGetBearNamesResponse) Reset()         { *m = QueryGetBearNamesResponse{} }
func (m *QueryGetBearNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBearNamesResponse) ProtoMessage()    {}
func (*QueryGetBearNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{3}
}
func (m *QueryGetBearNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBearNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBearNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBearNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBearNamesResponse.Merge(m, src)
}
func (m *QueryGetBearNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBearNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBearNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBearNamesResponse proto.InternalMessageInfo

func (m *QueryGetBearNamesResponse) GetBearNames() BearNames {
	if m != nil {
		return m.BearNames
	}
	return BearNames{}
}

type QueryAllBearNamesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBearNamesRequest) Reset()         { *m = QueryAllBearNamesRequest{} }
func (m *QueryAllBearNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBearNamesRequest) ProtoMessage()    {}
func (*QueryAllBearNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{4}
}
func (m *QueryAllBearNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBearNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBearNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBearNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBearNamesRequest.Merge(m, src)
}
func (m *QueryAllBearNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBearNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBearNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBearNamesRequest proto.InternalMessageInfo

func (m *QueryAllBearNamesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBearNamesResponse struct {
	BearNames  []BearNames         `protobuf:"bytes,1,rep,name=bearNames,proto3" json:"bearNames"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBearNamesResponse) Reset()         { *m = QueryAllBearNamesResponse{} }
func (m *QueryAllBearNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBearNamesResponse) ProtoMessage()    {}
func (*QueryAllBearNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{5}
}
func (m *QueryAllBearNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBearNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBearNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBearNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBearNamesResponse.Merge(m, src)
}
func (m *QueryAllBearNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBearNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBearNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBearNamesResponse proto.InternalMessageInfo

func (m *QueryAllBearNamesResponse) GetBearNames() []BearNames {
	if m != nil {
		return m.BearNames
	}
	return nil
}

func (m *QueryAllBearNamesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBearsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBearsRequest) Reset()         { *m = QueryGetBearsRequest{} }
func (m *QueryGetBearsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBearsRequest) ProtoMessage()    {}
func (*QueryGetBearsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{6}
}
func (m *QueryGetBearsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBearsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBearsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBearsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBearsRequest.Merge(m, src)
}
func (m *QueryGetBearsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBearsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBearsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBearsRequest proto.InternalMessageInfo

func (m *QueryGetBearsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBearsResponse struct {
	Bears Bears `protobuf:"bytes,1,opt,name=Bears,proto3" json:"Bears"`
}

func (m *QueryGetBearsResponse) Reset()         { *m = QueryGetBearsResponse{} }
func (m *QueryGetBearsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBearsResponse) ProtoMessage()    {}
func (*QueryGetBearsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{7}
}
func (m *QueryGetBearsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBearsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBearsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBearsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBearsResponse.Merge(m, src)
}
func (m *QueryGetBearsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBearsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBearsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBearsResponse proto.InternalMessageInfo

func (m *QueryGetBearsResponse) GetBears() Bears {
	if m != nil {
		return m.Bears
	}
	return Bears{}
}

type QueryAllBearsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBearsRequest) Reset()         { *m = QueryAllBearsRequest{} }
func (m *QueryAllBearsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBearsRequest) ProtoMessage()    {}
func (*QueryAllBearsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{8}
}
func (m *QueryAllBearsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBearsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBearsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBearsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBearsRequest.Merge(m, src)
}
func (m *QueryAllBearsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBearsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBearsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBearsRequest proto.InternalMessageInfo

func (m *QueryAllBearsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBearsResponse struct {
	Bears      []Bears             `protobuf:"bytes,1,rep,name=Bears,proto3" json:"Bears"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBearsResponse) Reset()         { *m = QueryAllBearsResponse{} }
func (m *QueryAllBearsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBearsResponse) ProtoMessage()    {}
func (*QueryAllBearsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{9}
}
func (m *QueryAllBearsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBearsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBearsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBearsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBearsResponse.Merge(m, src)
}
func (m *QueryAllBearsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBearsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBearsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBearsResponse proto.InternalMessageInfo

func (m *QueryAllBearsResponse) GetBears() []Bears {
	if m != nil {
		return m.Bears
	}
	return nil
}

func (m *QueryAllBearsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAddressBearsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAddressBearsRequest) Reset()         { *m = QueryGetAddressBearsRequest{} }
func (m *QueryGetAddressBearsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressBearsRequest) ProtoMessage()    {}
func (*QueryGetAddressBearsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{10}
}
func (m *QueryGetAddressBearsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressBearsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressBearsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressBearsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressBearsRequest.Merge(m, src)
}
func (m *QueryGetAddressBearsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressBearsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressBearsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressBearsRequest proto.InternalMessageInfo

func (m *QueryGetAddressBearsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetAddressBearsResponse struct {
	AddressBears AddressBears `protobuf:"bytes,1,opt,name=addressBears,proto3" json:"addressBears"`
}

func (m *QueryGetAddressBearsResponse) Reset()         { *m = QueryGetAddressBearsResponse{} }
func (m *QueryGetAddressBearsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressBearsResponse) ProtoMessage()    {}
func (*QueryGetAddressBearsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{11}
}
func (m *QueryGetAddressBearsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressBearsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressBearsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressBearsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressBearsResponse.Merge(m, src)
}
func (m *QueryGetAddressBearsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressBearsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressBearsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressBearsResponse proto.InternalMessageInfo

func (m *QueryGetAddressBearsResponse) GetAddressBears() AddressBears {
	if m != nil {
		return m.AddressBears
	}
	return AddressBears{}
}

type QueryAllAddressBearsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressBearsRequest) Reset()         { *m = QueryAllAddressBearsRequest{} }
func (m *QueryAllAddressBearsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressBearsRequest) ProtoMessage()    {}
func (*QueryAllAddressBearsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{12}
}
func (m *QueryAllAddressBearsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressBearsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressBearsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressBearsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressBearsRequest.Merge(m, src)
}
func (m *QueryAllAddressBearsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressBearsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressBearsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressBearsRequest proto.InternalMessageInfo

func (m *QueryAllAddressBearsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAddressBearsResponse struct {
	AddressBears []AddressBears      `protobuf:"bytes,1,rep,name=addressBears,proto3" json:"addressBears"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressBearsResponse) Reset()         { *m = QueryAllAddressBearsResponse{} }
func (m *QueryAllAddressBearsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressBearsResponse) ProtoMessage()    {}
func (*QueryAllAddressBearsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{13}
}
func (m *QueryAllAddressBearsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressBearsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressBearsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressBearsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressBearsResponse.Merge(m, src)
}
func (m *QueryAllAddressBearsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressBearsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressBearsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressBearsResponse proto.InternalMessageInfo

func (m *QueryAllAddressBearsResponse) GetAddressBears() []AddressBears {
	if m != nil {
		return m.AddressBears
	}
	return nil
}

func (m *QueryAllAddressBearsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFieldsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFieldsRequest) Reset()         { *m = QueryGetFieldsRequest{} }
func (m *QueryGetFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFieldsRequest) ProtoMessage()    {}
func (*QueryGetFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{14}
}
func (m *QueryGetFieldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFieldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFieldsRequest.Merge(m, src)
}
func (m *QueryGetFieldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFieldsRequest proto.InternalMessageInfo

func (m *QueryGetFieldsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFieldsResponse struct {
	Fields Fields `protobuf:"bytes,1,opt,name=Fields,proto3" json:"Fields"`
}

func (m *QueryGetFieldsResponse) Reset()         { *m = QueryGetFieldsResponse{} }
func (m *QueryGetFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFieldsResponse) ProtoMessage()    {}
func (*QueryGetFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{15}
}
func (m *QueryGetFieldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFieldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFieldsResponse.Merge(m, src)
}
func (m *QueryGetFieldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFieldsResponse proto.InternalMessageInfo

func (m *QueryGetFieldsResponse) GetFields() Fields {
	if m != nil {
		return m.Fields
	}
	return Fields{}
}

type QueryAllFieldsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFieldsRequest) Reset()         { *m = QueryAllFieldsRequest{} }
func (m *QueryAllFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFieldsRequest) ProtoMessage()    {}
func (*QueryAllFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{16}
}
func (m *QueryAllFieldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFieldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFieldsRequest.Merge(m, src)
}
func (m *QueryAllFieldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFieldsRequest proto.InternalMessageInfo

func (m *QueryAllFieldsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFieldsResponse struct {
	Fields     []Fields            `protobuf:"bytes,1,rep,name=Fields,proto3" json:"Fields"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFieldsResponse) Reset()         { *m = QueryAllFieldsResponse{} }
func (m *QueryAllFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFieldsResponse) ProtoMessage()    {}
func (*QueryAllFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{17}
}
func (m *QueryAllFieldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFieldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFieldsResponse.Merge(m, src)
}
func (m *QueryAllFieldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFieldsResponse proto.InternalMessageInfo

func (m *QueryAllFieldsResponse) GetFields() []Fields {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *QueryAllFieldsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTreesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTreesRequest) Reset()         { *m = QueryGetTreesRequest{} }
func (m *QueryGetTreesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreesRequest) ProtoMessage()    {}
func (*QueryGetTreesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{18}
}
func (m *QueryGetTreesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreesRequest.Merge(m, src)
}
func (m *QueryGetTreesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreesRequest proto.InternalMessageInfo

func (m *QueryGetTreesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTreesResponse struct {
	Trees Trees `protobuf:"bytes,1,opt,name=Trees,proto3" json:"Trees"`
}

func (m *QueryGetTreesResponse) Reset()         { *m = QueryGetTreesResponse{} }
func (m *QueryGetTreesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreesResponse) ProtoMessage()    {}
func (*QueryGetTreesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{19}
}
func (m *QueryGetTreesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreesResponse.Merge(m, src)
}
func (m *QueryGetTreesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreesResponse proto.InternalMessageInfo

func (m *QueryGetTreesResponse) GetTrees() Trees {
	if m != nil {
		return m.Trees
	}
	return Trees{}
}

type QueryAllTreesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTreesRequest) Reset()         { *m = QueryAllTreesRequest{} }
func (m *QueryAllTreesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTreesRequest) ProtoMessage()    {}
func (*QueryAllTreesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{20}
}
func (m *QueryAllTreesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTreesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTreesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTreesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTreesRequest.Merge(m, src)
}
func (m *QueryAllTreesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTreesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTreesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTreesRequest proto.InternalMessageInfo

func (m *QueryAllTreesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTreesResponse struct {
	Trees      []Trees             `protobuf:"bytes,1,rep,name=Trees,proto3" json:"Trees"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTreesResponse) Reset()         { *m = QueryAllTreesResponse{} }
func (m *QueryAllTreesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTreesResponse) ProtoMessage()    {}
func (*QueryAllTreesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa8137833424c71, []int{21}
}
func (m *QueryAllTreesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTreesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTreesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTreesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTreesResponse.Merge(m, src)
}
func (m *QueryAllTreesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTreesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTreesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTreesResponse proto.InternalMessageInfo

func (m *QueryAllTreesResponse) GetTrees() []Trees {
	if m != nil {
		return m.Trees
	}
	return nil
}

func (m *QueryAllTreesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "MonetaToday.honeywood.bears.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "MonetaToday.honeywood.bears.QueryParamsResponse")
	proto.RegisterType((*QueryGetBearNamesRequest)(nil), "MonetaToday.honeywood.bears.QueryGetBearNamesRequest")
	proto.RegisterType((*QueryGetBearNamesResponse)(nil), "MonetaToday.honeywood.bears.QueryGetBearNamesResponse")
	proto.RegisterType((*QueryAllBearNamesRequest)(nil), "MonetaToday.honeywood.bears.QueryAllBearNamesRequest")
	proto.RegisterType((*QueryAllBearNamesResponse)(nil), "MonetaToday.honeywood.bears.QueryAllBearNamesResponse")
	proto.RegisterType((*QueryGetBearsRequest)(nil), "MonetaToday.honeywood.bears.QueryGetBearsRequest")
	proto.RegisterType((*QueryGetBearsResponse)(nil), "MonetaToday.honeywood.bears.QueryGetBearsResponse")
	proto.RegisterType((*QueryAllBearsRequest)(nil), "MonetaToday.honeywood.bears.QueryAllBearsRequest")
	proto.RegisterType((*QueryAllBearsResponse)(nil), "MonetaToday.honeywood.bears.QueryAllBearsResponse")
	proto.RegisterType((*QueryGetAddressBearsRequest)(nil), "MonetaToday.honeywood.bears.QueryGetAddressBearsRequest")
	proto.RegisterType((*QueryGetAddressBearsResponse)(nil), "MonetaToday.honeywood.bears.QueryGetAddressBearsResponse")
	proto.RegisterType((*QueryAllAddressBearsRequest)(nil), "MonetaToday.honeywood.bears.QueryAllAddressBearsRequest")
	proto.RegisterType((*QueryAllAddressBearsResponse)(nil), "MonetaToday.honeywood.bears.QueryAllAddressBearsResponse")
	proto.RegisterType((*QueryGetFieldsRequest)(nil), "MonetaToday.honeywood.bears.QueryGetFieldsRequest")
	proto.RegisterType((*QueryGetFieldsResponse)(nil), "MonetaToday.honeywood.bears.QueryGetFieldsResponse")
	proto.RegisterType((*QueryAllFieldsRequest)(nil), "MonetaToday.honeywood.bears.QueryAllFieldsRequest")
	proto.RegisterType((*QueryAllFieldsResponse)(nil), "MonetaToday.honeywood.bears.QueryAllFieldsResponse")
	proto.RegisterType((*QueryGetTreesRequest)(nil), "MonetaToday.honeywood.bears.QueryGetTreesRequest")
	proto.RegisterType((*QueryGetTreesResponse)(nil), "MonetaToday.honeywood.bears.QueryGetTreesResponse")
	proto.RegisterType((*QueryAllTreesRequest)(nil), "MonetaToday.honeywood.bears.QueryAllTreesRequest")
	proto.RegisterType((*QueryAllTreesResponse)(nil), "MonetaToday.honeywood.bears.QueryAllTreesResponse")
}

func init() { proto.RegisterFile("bears/query.proto", fileDescriptor_2fa8137833424c71) }

var fileDescriptor_2fa8137833424c71 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x49, 0x5b, 0xc8, 0x50, 0x15, 0x75, 0x28, 0x55, 0x9b, 0x56, 0x01, 0x4d, 0xa1,
	0x3f, 0x02, 0xb2, 0x9b, 0x14, 0x4a, 0x91, 0x10, 0x52, 0x7a, 0x68, 0x2b, 0x24, 0x50, 0x09, 0x95,
	0x8a, 0x40, 0xa2, 0x9a, 0xd4, 0x83, 0x6b, 0xc9, 0xf1, 0xa4, 0xb1, 0x0b, 0x44, 0x55, 0x2f, 0xfc,
	0x05, 0x48, 0x5c, 0xb8, 0x20, 0x40, 0xec, 0x79, 0xb5, 0xda, 0xe3, 0x6a, 0x2f, 0x7b, 0xeb, 0xb1,
	0xd2, 0x1e, 0x76, 0x4f, 0xab, 0x55, 0xbb, 0x7f, 0xc8, 0xca, 0x33, 0xe3, 0xd8, 0x4e, 0x9c, 0x64,
	0x92, 0xa6, 0x97, 0x36, 0x7e, 0x99, 0xf7, 0xe6, 0xf3, 0xde, 0xb3, 0xbf, 0x6f, 0x1c, 0x38, 0x5d,
	0xa5, 0xa4, 0xe1, 0xea, 0xa7, 0x67, 0xb4, 0xd1, 0xd4, 0xea, 0x0d, 0xe6, 0x31, 0xb4, 0xf0, 0x35,
	0x73, 0xa8, 0x47, 0x0e, 0x98, 0x41, 0x9a, 0xda, 0x09, 0x73, 0x68, 0xf3, 0x57, 0xc6, 0x0c, 0x8d,
	0x2f, 0xcc, 0xcd, 0x98, 0xcc, 0x64, 0x7c, 0x9d, 0xee, 0x7f, 0x12, 0x2e, 0xb9, 0x45, 0x93, 0x31,
	0xd3, 0xa6, 0x3a, 0xa9, 0x5b, 0x3a, 0x71, 0x1c, 0xe6, 0x11, 0xcf, 0x62, 0x8e, 0x2b, 0xbf, 0x2d,
	0x1c, 0x33, 0xb7, 0xc6, 0x5c, 0xbd, 0x4a, 0x5c, 0x2a, 0x76, 0xd2, 0x7f, 0x29, 0x56, 0xa9, 0x47,
	0x8a, 0x7a, 0x9d, 0x98, 0x96, 0xc3, 0x17, 0xcb, 0xb5, 0x48, 0xf0, 0xd4, 0x49, 0x83, 0xd4, 0x02,
	0xff, 0x59, 0x61, 0xf3, 0xff, 0x1e, 0x39, 0xa4, 0x46, 0x03, 0xfb, 0x74, 0x68, 0x0f, 0x4c, 0xf3,
	0xc2, 0x44, 0x0c, 0xa3, 0x41, 0x5d, 0xf7, 0x28, 0xfa, 0x95, 0x8c, 0xfc, 0xb3, 0x45, 0x6d, 0xa3,
	0x2d, 0x82, 0xd7, 0xa0, 0x41, 0x50, 0x3c, 0x03, 0xd1, 0xb7, 0x3e, 0xe2, 0x3e, 0x27, 0xa8, 0xd0,
	0xd3, 0x33, 0xea, 0x7a, 0xf8, 0x7b, 0xf8, 0x4e, 0xcc, 0xea, 0xd6, 0x99, 0xe3, 0x52, 0x54, 0x86,
	0x13, 0x82, 0x74, 0x0e, 0xbc, 0x0f, 0x56, 0xdf, 0x2a, 0x2d, 0x69, 0x3d, 0x6a, 0xa7, 0x09, 0xe7,
	0xed, 0xb1, 0xcb, 0x17, 0xef, 0xa5, 0x2a, 0xd2, 0x11, 0x6b, 0x70, 0x8e, 0x47, 0xde, 0xa5, 0xde,
	0x36, 0x25, 0x8d, 0x6f, 0xfc, 0xfc, 0xe4, 0xae, 0x08, 0xc1, 0x31, 0x3f, 0x5f, 0x1e, 0x3c, 0x5b,
	0xe1, 0x9f, 0xb1, 0x09, 0xe7, 0x13, 0xd6, 0x4b, 0x9e, 0xaf, 0x60, 0xb6, 0x1a, 0x18, 0x25, 0xd2,
	0x72, 0x4f, 0xa4, 0x56, 0x08, 0x49, 0x15, 0xba, 0xe3, 0xaa, 0x04, 0x2b, 0xdb, 0x76, 0x07, 0xd8,
	0x0e, 0x84, 0x61, 0xe7, 0x5a, 0x1b, 0x89, 0x36, 0x6b, 0x7e, 0x9b, 0x35, 0x71, 0x43, 0xc9, 0x36,
	0x6b, 0xfb, 0xc4, 0xa4, 0xd2, 0xb7, 0x12, 0xf1, 0xc4, 0x0f, 0x80, 0xcc, 0x26, 0xbe, 0x49, 0x72,
	0x36, 0x99, 0x5b, 0x64, 0x83, 0x76, 0x63, 0xc4, 0x69, 0x4e, 0xbc, 0xd2, 0x97, 0x58, 0x80, 0xc4,
	0x90, 0x97, 0xe1, 0x4c, 0xb4, 0xfe, 0xad, 0x92, 0x4c, 0xc1, 0xb4, 0x65, 0xf0, 0x52, 0x8c, 0x55,
	0xd2, 0x96, 0x81, 0x0f, 0xe1, 0xbb, 0x6d, 0xeb, 0x64, 0x56, 0x5f, 0xc2, 0x71, 0x6e, 0x90, 0x65,
	0xc3, 0x7d, 0x33, 0x0a, 0xb2, 0x11, 0x6e, 0xf8, 0x27, 0x09, 0x20, 0x4b, 0x36, 0xf2, 0x9e, 0xfc,
	0x0b, 0x24, 0x79, 0xb8, 0x41, 0x27, 0x79, 0x66, 0x08, 0xf2, 0xd1, 0xf5, 0xe0, 0x33, 0xb8, 0x10,
	0xd4, 0xb6, 0x2c, 0x9e, 0xf4, 0x58, 0x25, 0xe6, 0xe0, 0x1b, 0x52, 0x00, 0xe4, 0x93, 0x13, 0x5c,
	0x62, 0x17, 0x2e, 0x26, 0x3b, 0xca, 0x0c, 0xbf, 0x83, 0x93, 0x24, 0x62, 0x97, 0x55, 0x5c, 0xeb,
	0x99, 0x68, 0x34, 0x90, 0xcc, 0x37, 0x16, 0x04, 0x53, 0x49, 0x5b, 0xb6, 0xed, 0x24, 0xda, 0x51,
	0xf5, 0xed, 0x31, 0x90, 0xc9, 0x75, 0xec, 0xd3, 0x35, 0xb9, 0xcc, 0xad, 0x93, 0x1b, 0x5d, 0x4f,
	0x57, 0xc2, 0xe7, 0x65, 0x87, 0x4b, 0x74, 0xb7, 0x07, 0xeb, 0x47, 0x38, 0xdb, 0xbe, 0x30, 0x54,
	0x63, 0x61, 0x51, 0x52, 0x63, 0xb1, 0x34, 0x50, 0x63, 0x71, 0x85, 0x8f, 0xc2, 0x7b, 0x3f, 0x4e,
	0x31, 0xaa, 0x2e, 0xdd, 0x03, 0x12, 0x3f, 0xb2, 0x43, 0x02, 0x7e, 0x66, 0x28, 0xfc, 0x3b, 0x51,
	0xb9, 0x03, 0x7f, 0x38, 0x2a, 0xa8, 0x9c, 0x5c, 0x17, 0x6a, 0x05, 0x37, 0x28, 0xa9, 0x1c, 0x5f,
	0x19, 0x68, 0x05, 0xbf, 0x88, 0xaa, 0x5c, 0x0c, 0xe0, 0x2e, 0x54, 0xae, 0x2b, 0x79, 0x66, 0x08,
	0xf2, 0x91, 0xf5, 0xa0, 0xf4, 0x6c, 0x0a, 0x8e, 0x73, 0x44, 0xf4, 0x17, 0x80, 0x13, 0xe2, 0xf0,
	0x80, 0xf4, 0x9e, 0x38, 0x9d, 0x27, 0x97, 0xdc, 0xba, 0xba, 0x83, 0x60, 0xc0, 0x1f, 0xfd, 0xfe,
	0xf4, 0xd5, 0x9f, 0xe9, 0x0f, 0xd1, 0x92, 0x1e, 0xf1, 0xd4, 0x5b, 0x9e, 0x7a, 0xf4, 0x84, 0x86,
	0x1e, 0x02, 0x98, 0x6d, 0x8d, 0x5d, 0xf4, 0x69, 0xff, 0xcd, 0x12, 0xce, 0x39, 0xb9, 0xcd, 0x41,
	0xdd, 0x24, 0xe9, 0x26, 0x27, 0x5d, 0x47, 0x5a, 0x4f, 0xd2, 0xf0, 0xdc, 0xa8, 0x9f, 0xfb, 0xff,
	0x2e, 0xd0, 0x7d, 0x00, 0x27, 0x5b, 0xd1, 0xca, 0xb6, 0xad, 0xc2, 0x9d, 0x70, 0x0c, 0x52, 0xe1,
	0x4e, 0x3a, 0xd8, 0x60, 0x9d, 0x73, 0xaf, 0xa1, 0x15, 0x45, 0x6e, 0xf4, 0x0f, 0x90, 0xa3, 0x17,
	0x15, 0x95, 0x4b, 0xd5, 0xa2, 0x2c, 0x0d, 0xe2, 0x32, 0x30, 0xa1, 0xab, 0x9f, 0x5b, 0xc6, 0x05,
	0xfa, 0x1b, 0xc0, 0x37, 0x79, 0x08, 0xbf, 0x9c, 0x45, 0xe5, 0xba, 0x0c, 0x02, 0xd9, 0x7e, 0x1e,
	0xc1, 0x05, 0x0e, 0xf9, 0x01, 0xc2, 0xfd, 0x21, 0xd1, 0x13, 0x00, 0x27, 0xa3, 0xc3, 0x0c, 0x6d,
	0x29, 0x55, 0x25, 0x61, 0x60, 0xe7, 0x3e, 0x1f, 0xc2, 0x53, 0x12, 0x7f, 0xc1, 0x89, 0x37, 0xd1,
	0x27, 0x3d, 0x89, 0x63, 0x6f, 0x2f, 0xfa, 0xb9, 0xbc, 0xbc, 0x40, 0x8f, 0x00, 0x7c, 0x3b, 0x1a,
	0xd6, 0x2f, 0xf5, 0x96, 0x52, 0xdd, 0x86, 0x4c, 0xa3, 0xcb, 0x49, 0x02, 0x97, 0x78, 0x1a, 0x1f,
	0xa3, 0x82, 0x7a, 0x1a, 0xe8, 0x7f, 0x10, 0x8c, 0x37, 0xa4, 0x76, 0x43, 0xc6, 0xe6, 0x6f, 0x6e,
	0x63, 0x20, 0x1f, 0xc9, 0xb9, 0xce, 0x39, 0x0b, 0x68, 0xb5, 0x27, 0xa7, 0x78, 0x23, 0x14, 0xb7,
	0xf1, 0x7f, 0x00, 0x66, 0x45, 0x10, 0xbf, 0xb8, 0x6a, 0x37, 0xe5, 0xc0, 0xa0, 0x1d, 0xa3, 0x5f,
	0x51, 0x72, 0x05, 0x28, 0x17, 0x03, 0x31, 0x6a, 0xd4, 0xc4, 0x20, 0x3a, 0x3f, 0x15, 0xc5, 0x20,
	0x36, 0x11, 0x15, 0xc5, 0x80, 0xbf, 0x44, 0x87, 0x62, 0xc0, 0x43, 0xa8, 0x8b, 0xc1, 0xa0, 0x90,
	0xed, 0x63, 0x5b, 0x51, 0x0c, 0x38, 0xe4, 0xf6, 0xde, 0xe5, 0x75, 0x1e, 0x5c, 0x5d, 0xe7, 0xc1,
	0xcb, 0xeb, 0x3c, 0xf8, 0xe3, 0x26, 0x9f, 0xba, 0xba, 0xc9, 0xa7, 0x9e, 0xdf, 0xe4, 0x53, 0x3f,
	0x68, 0xa6, 0xe5, 0x9d, 0x9c, 0x55, 0xb5, 0x63, 0x56, 0x8b, 0xc5, 0xd9, 0xf3, 0xe3, 0x1c, 0xfa,
	0x71, 0x7e, 0x0b, 0x22, 0x35, 0xeb, 0xd4, 0xad, 0x4e, 0xf0, 0x1f, 0x0d, 0x36, 0x5e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x47, 0x70, 0xc2, 0x4a, 0x47, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a BearNames by index.
	BearNames(ctx context.Context, in *QueryGetBearNamesRequest, opts ...grpc.CallOption) (*QueryGetBearNamesResponse, error)
	// Queries a list of BearNames items.
	BearNamesAll(ctx context.Context, in *QueryAllBearNamesRequest, opts ...grpc.CallOption) (*QueryAllBearNamesResponse, error)
	// Queries a Bears by id.
	Bears(ctx context.Context, in *QueryGetBearsRequest, opts ...grpc.CallOption) (*QueryGetBearsResponse, error)
	// Queries a list of Bears items.
	BearsAll(ctx context.Context, in *QueryAllBearsRequest, opts ...grpc.CallOption) (*QueryAllBearsResponse, error)
	// Queries a AddressBears by index.
	AddressBears(ctx context.Context, in *QueryGetAddressBearsRequest, opts ...grpc.CallOption) (*QueryGetAddressBearsResponse, error)
	// Queries a list of AddressBears items.
	AddressBearsAll(ctx context.Context, in *QueryAllAddressBearsRequest, opts ...grpc.CallOption) (*QueryAllAddressBearsResponse, error)
	// Queries a Fields by id.
	Fields(ctx context.Context, in *QueryGetFieldsRequest, opts ...grpc.CallOption) (*QueryGetFieldsResponse, error)
	// Queries a list of Fields items.
	FieldsAll(ctx context.Context, in *QueryAllFieldsRequest, opts ...grpc.CallOption) (*QueryAllFieldsResponse, error)
	// Queries a Trees by id.
	Trees(ctx context.Context, in *QueryGetTreesRequest, opts ...grpc.CallOption) (*QueryGetTreesResponse, error)
	// Queries a list of Trees items.
	TreesAll(ctx context.Context, in *QueryAllTreesRequest, opts ...grpc.CallOption) (*QueryAllTreesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BearNames(ctx context.Context, in *QueryGetBearNamesRequest, opts ...grpc.CallOption) (*QueryGetBearNamesResponse, error) {
	out := new(QueryGetBearNamesResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/BearNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BearNamesAll(ctx context.Context, in *QueryAllBearNamesRequest, opts ...grpc.CallOption) (*QueryAllBearNamesResponse, error) {
	out := new(QueryAllBearNamesResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/BearNamesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bears(ctx context.Context, in *QueryGetBearsRequest, opts ...grpc.CallOption) (*QueryGetBearsResponse, error) {
	out := new(QueryGetBearsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/Bears", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BearsAll(ctx context.Context, in *QueryAllBearsRequest, opts ...grpc.CallOption) (*QueryAllBearsResponse, error) {
	out := new(QueryAllBearsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/BearsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressBears(ctx context.Context, in *QueryGetAddressBearsRequest, opts ...grpc.CallOption) (*QueryGetAddressBearsResponse, error) {
	out := new(QueryGetAddressBearsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/AddressBears", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressBearsAll(ctx context.Context, in *QueryAllAddressBearsRequest, opts ...grpc.CallOption) (*QueryAllAddressBearsResponse, error) {
	out := new(QueryAllAddressBearsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/AddressBearsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fields(ctx context.Context, in *QueryGetFieldsRequest, opts ...grpc.CallOption) (*QueryGetFieldsResponse, error) {
	out := new(QueryGetFieldsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/Fields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FieldsAll(ctx context.Context, in *QueryAllFieldsRequest, opts ...grpc.CallOption) (*QueryAllFieldsResponse, error) {
	out := new(QueryAllFieldsResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/FieldsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Trees(ctx context.Context, in *QueryGetTreesRequest, opts ...grpc.CallOption) (*QueryGetTreesResponse, error) {
	out := new(QueryGetTreesResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/Trees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TreesAll(ctx context.Context, in *QueryAllTreesRequest, opts ...grpc.CallOption) (*QueryAllTreesResponse, error) {
	out := new(QueryAllTreesResponse)
	err := c.cc.Invoke(ctx, "/MonetaToday.honeywood.bears.Query/TreesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a BearNames by index.
	BearNames(context.Context, *QueryGetBearNamesRequest) (*QueryGetBearNamesResponse, error)
	// Queries a list of BearNames items.
	BearNamesAll(context.Context, *QueryAllBearNamesRequest) (*QueryAllBearNamesResponse, error)
	// Queries a Bears by id.
	Bears(context.Context, *QueryGetBearsRequest) (*QueryGetBearsResponse, error)
	// Queries a list of Bears items.
	BearsAll(context.Context, *QueryAllBearsRequest) (*QueryAllBearsResponse, error)
	// Queries a AddressBears by index.
	AddressBears(context.Context, *QueryGetAddressBearsRequest) (*QueryGetAddressBearsResponse, error)
	// Queries a list of AddressBears items.
	AddressBearsAll(context.Context, *QueryAllAddressBearsRequest) (*QueryAllAddressBearsResponse, error)
	// Queries a Fields by id.
	Fields(context.Context, *QueryGetFieldsRequest) (*QueryGetFieldsResponse, error)
	// Queries a list of Fields items.
	FieldsAll(context.Context, *QueryAllFieldsRequest) (*QueryAllFieldsResponse, error)
	// Queries a Trees by id.
	Trees(context.Context, *QueryGetTreesRequest) (*QueryGetTreesResponse, error)
	// Queries a list of Trees items.
	TreesAll(context.Context, *QueryAllTreesRequest) (*QueryAllTreesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BearNames(ctx context.Context, req *QueryGetBearNamesRequest) (*QueryGetBearNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BearNames not implemented")
}
func (*UnimplementedQueryServer) BearNamesAll(ctx context.Context, req *QueryAllBearNamesRequest) (*QueryAllBearNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BearNamesAll not implemented")
}
func (*UnimplementedQueryServer) Bears(ctx context.Context, req *QueryGetBearsRequest) (*QueryGetBearsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bears not implemented")
}
func (*UnimplementedQueryServer) BearsAll(ctx context.Context, req *QueryAllBearsRequest) (*QueryAllBearsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BearsAll not implemented")
}
func (*UnimplementedQueryServer) AddressBears(ctx context.Context, req *QueryGetAddressBearsRequest) (*QueryGetAddressBearsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressBears not implemented")
}
func (*UnimplementedQueryServer) AddressBearsAll(ctx context.Context, req *QueryAllAddressBearsRequest) (*QueryAllAddressBearsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressBearsAll not implemented")
}
func (*UnimplementedQueryServer) Fields(ctx context.Context, req *QueryGetFieldsRequest) (*QueryGetFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fields not implemented")
}
func (*UnimplementedQueryServer) FieldsAll(ctx context.Context, req *QueryAllFieldsRequest) (*QueryAllFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FieldsAll not implemented")
}
func (*UnimplementedQueryServer) Trees(ctx context.Context, req *QueryGetTreesRequest) (*QueryGetTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trees not implemented")
}
func (*UnimplementedQueryServer) TreesAll(ctx context.Context, req *QueryAllTreesRequest) (*QueryAllTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreesAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BearNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBearNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BearNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/BearNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BearNames(ctx, req.(*QueryGetBearNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BearNamesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBearNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BearNamesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/BearNamesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BearNamesAll(ctx, req.(*QueryAllBearNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bears_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBearsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bears(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/Bears",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bears(ctx, req.(*QueryGetBearsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BearsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBearsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BearsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/BearsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BearsAll(ctx, req.(*QueryAllBearsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressBears_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressBearsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressBears(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/AddressBears",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressBears(ctx, req.(*QueryGetAddressBearsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressBearsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressBearsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressBearsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/AddressBearsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressBearsAll(ctx, req.(*QueryAllAddressBearsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/Fields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fields(ctx, req.(*QueryGetFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FieldsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FieldsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/FieldsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FieldsAll(ctx, req.(*QueryAllFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Trees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Trees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/Trees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Trees(ctx, req.(*QueryGetTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TreesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TreesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonetaToday.honeywood.bears.Query/TreesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TreesAll(ctx, req.(*QueryAllTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MonetaToday.honeywood.bears.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BearNames",
			Handler:    _Query_BearNames_Handler,
		},
		{
			MethodName: "BearNamesAll",
			Handler:    _Query_BearNamesAll_Handler,
		},
		{
			MethodName: "Bears",
			Handler:    _Query_Bears_Handler,
		},
		{
			MethodName: "BearsAll",
			Handler:    _Query_BearsAll_Handler,
		},
		{
			MethodName: "AddressBears",
			Handler:    _Query_AddressBears_Handler,
		},
		{
			MethodName: "AddressBearsAll",
			Handler:    _Query_AddressBearsAll_Handler,
		},
		{
			MethodName: "Fields",
			Handler:    _Query_Fields_Handler,
		},
		{
			MethodName: "FieldsAll",
			Handler:    _Query_FieldsAll_Handler,
		},
		{
			MethodName: "Trees",
			Handler:    _Query_Trees_Handler,
		},
		{
			MethodName: "TreesAll",
			Handler:    _Query_TreesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bears/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBearNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBearNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBearNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBearNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBearNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBearNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BearNames.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBearNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBearNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBearNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBearNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBearNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBearNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BearNames) > 0 {
		for iNdEx := len(m.BearNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BearNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBearsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBearsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBearsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBearsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBearsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBearsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bears.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBearsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBearsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBearsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBearsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBearsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBearsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bears) > 0 {
		for iNdEx := len(m.Bears) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bears[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressBearsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressBearsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressBearsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressBearsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressBearsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressBearsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AddressBears.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressBearsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressBearsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressBearsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressBearsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressBearsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressBearsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressBears) > 0 {
		for iNdEx := len(m.AddressBears) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressBears[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFieldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFieldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFieldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFieldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFieldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFieldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFieldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFieldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFieldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFieldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFieldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFieldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTreesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTreesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Trees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTreesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTreesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTreesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTreesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTreesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTreesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trees) > 0 {
		for iNdEx := len(m.Trees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBearNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBearNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BearNames.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBearNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBearNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BearNames) > 0 {
		for _, e := range m.BearNames {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBearsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBearsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bears.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBearsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBearsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bears) > 0 {
		for _, e := range m.Bears {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressBearsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressBearsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AddressBears.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAddressBearsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressBearsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressBears) > 0 {
		for _, e := range m.AddressBears {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFieldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFieldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fields.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFieldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFieldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTreesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTreesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Trees.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTreesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTreesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Trees) > 0 {
		for _, e := range m.Trees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBearNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBearNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBearNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBearNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBearNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBearNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BearNames.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBearNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBearNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBearNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBearNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBearNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBearNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearNames = append(m.BearNames, BearNames{})
			if err := m.BearNames[len(m.BearNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBearsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBearsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBearsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBearsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBearsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBearsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bears", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bears.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBearsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBearsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBearsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBearsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBearsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBearsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bears", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bears = append(m.Bears, Bears{})
			if err := m.Bears[len(m.Bears)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressBearsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressBearsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressBearsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressBearsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressBearsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressBearsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressBears", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddressBears.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressBearsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressBearsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressBearsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressBearsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressBearsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressBearsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressBears", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressBears = append(m.AddressBears, AddressBears{})
			if err := m.AddressBears[len(m.AddressBears)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFieldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFieldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFieldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFieldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFieldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFieldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFieldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFieldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFieldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFieldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFieldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFieldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Fields{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTreesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTreesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTreesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTreesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTreesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTreesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trees = append(m.Trees, Trees{})
			if err := m.Trees[len(m.Trees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
