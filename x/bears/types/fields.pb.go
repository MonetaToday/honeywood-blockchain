// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/fields.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FieldRows struct {
	Columns []Tiles `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns"`
}

func (m *FieldRows) Reset()         { *m = FieldRows{} }
func (m *FieldRows) String() string { return proto.CompactTextString(m) }
func (*FieldRows) ProtoMessage()    {}
func (*FieldRows) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb33884978356795, []int{0}
}
func (m *FieldRows) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldRows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldRows.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldRows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldRows.Merge(m, src)
}
func (m *FieldRows) XXX_Size() int {
	return m.Size()
}
func (m *FieldRows) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldRows.DiscardUnknown(m)
}

var xxx_messageInfo_FieldRows proto.InternalMessageInfo

func (m *FieldRows) GetColumns() []Tiles {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ItemPosition struct {
	FieldId  uint64 `protobuf:"varint,1,opt,name=fieldId,proto3" json:"fieldId,omitempty"`
	RowId    uint64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
	ColumnId uint64 `protobuf:"varint,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
}

func (m *ItemPosition) Reset()         { *m = ItemPosition{} }
func (m *ItemPosition) String() string { return proto.CompactTextString(m) }
func (*ItemPosition) ProtoMessage()    {}
func (*ItemPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb33884978356795, []int{1}
}
func (m *ItemPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemPosition.Merge(m, src)
}
func (m *ItemPosition) XXX_Size() int {
	return m.Size()
}
func (m *ItemPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemPosition.DiscardUnknown(m)
}

var xxx_messageInfo_ItemPosition proto.InternalMessageInfo

func (m *ItemPosition) GetFieldId() uint64 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *ItemPosition) GetRowId() uint64 {
	if m != nil {
		return m.RowId
	}
	return 0
}

func (m *ItemPosition) GetColumnId() uint64 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

type FieldParams struct {
	FieldType string                                   `protobuf:"bytes,1,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" yaml:"field_type"`
	PriceTile github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=price_tile,json=priceTile,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_tile" yaml:"price_tile"`
}

func (m *FieldParams) Reset()         { *m = FieldParams{} }
func (m *FieldParams) String() string { return proto.CompactTextString(m) }
func (*FieldParams) ProtoMessage()    {}
func (*FieldParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb33884978356795, []int{2}
}
func (m *FieldParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldParams.Merge(m, src)
}
func (m *FieldParams) XXX_Size() int {
	return m.Size()
}
func (m *FieldParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldParams.DiscardUnknown(m)
}

var xxx_messageInfo_FieldParams proto.InternalMessageInfo

func (m *FieldParams) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *FieldParams) GetPriceTile() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceTile
	}
	return nil
}

type Fields struct {
	Id         uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BearOwner  *BearOwner   `protobuf:"bytes,2,opt,name=bearOwner,proto3" json:"bearOwner,omitempty"`
	Params     *FieldParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	Rows       []FieldRows  `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows"`
	CountTiles uint64       `protobuf:"varint,5,opt,name=countTiles,proto3" json:"countTiles,omitempty"`
}

func (m *Fields) Reset()         { *m = Fields{} }
func (m *Fields) String() string { return proto.CompactTextString(m) }
func (*Fields) ProtoMessage()    {}
func (*Fields) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb33884978356795, []int{3}
}
func (m *Fields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fields.Merge(m, src)
}
func (m *Fields) XXX_Size() int {
	return m.Size()
}
func (m *Fields) XXX_DiscardUnknown() {
	xxx_messageInfo_Fields.DiscardUnknown(m)
}

var xxx_messageInfo_Fields proto.InternalMessageInfo

func (m *Fields) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Fields) GetBearOwner() *BearOwner {
	if m != nil {
		return m.BearOwner
	}
	return nil
}

func (m *Fields) GetParams() *FieldParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Fields) GetRows() []FieldRows {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *Fields) GetCountTiles() uint64 {
	if m != nil {
		return m.CountTiles
	}
	return 0
}

func init() {
	proto.RegisterType((*FieldRows)(nil), "MonetaToday.honeywood.bears.FieldRows")
	proto.RegisterType((*ItemPosition)(nil), "MonetaToday.honeywood.bears.ItemPosition")
	proto.RegisterType((*FieldParams)(nil), "MonetaToday.honeywood.bears.FieldParams")
	proto.RegisterType((*Fields)(nil), "MonetaToday.honeywood.bears.Fields")
}

func init() { proto.RegisterFile("bears/fields.proto", fileDescriptor_fb33884978356795) }

var fileDescriptor_fb33884978356795 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x63, 0x37, 0x4d, 0xf1, 0x06, 0x21, 0x75, 0x55, 0x24, 0x13, 0x24, 0xa7, 0xf2, 0xa1,
	0xca, 0x85, 0x5d, 0x35, 0x70, 0xe2, 0x54, 0x99, 0x0f, 0x35, 0x07, 0xd4, 0xca, 0x8a, 0x84, 0xd4,
	0x4b, 0xe5, 0x8f, 0x25, 0x5d, 0x11, 0x7b, 0x2c, 0xaf, 0x83, 0xf1, 0x09, 0x89, 0x27, 0xe0, 0x39,
	0x78, 0x0e, 0x0e, 0x3d, 0xf6, 0xc8, 0x29, 0xa0, 0xe4, 0x0d, 0x78, 0x02, 0xb4, 0x63, 0x9b, 0x84,
	0x4b, 0x7a, 0xb1, 0x77, 0x66, 0xf7, 0xff, 0x9f, 0x9d, 0xdf, 0x0e, 0xa1, 0xa1, 0x08, 0x72, 0xc5,
	0x3f, 0x48, 0x31, 0x8f, 0x15, 0xcb, 0x72, 0x28, 0x80, 0x3e, 0x7d, 0x07, 0xa9, 0x28, 0x82, 0x29,
	0xc4, 0x41, 0xc5, 0x6e, 0x20, 0x15, 0x55, 0x09, 0x10, 0x33, 0x3c, 0x39, 0x70, 0x22, 0x50, 0x09,
	0x28, 0x1e, 0x06, 0x4a, 0xf0, 0x4f, 0xa7, 0xa1, 0x28, 0x82, 0x53, 0x1e, 0x81, 0x4c, 0x6b, 0xf1,
	0xe0, 0x68, 0x06, 0x33, 0xc0, 0x25, 0xd7, 0xab, 0x26, 0x7b, 0x58, 0x97, 0x29, 0xe4, 0x5c, 0xa8,
	0xff, 0x53, 0xf8, 0xad, 0x53, 0xee, 0x05, 0xb1, 0xde, 0xea, 0x8b, 0xf8, 0x50, 0x2a, 0xea, 0x91,
	0x83, 0x08, 0xe6, 0x8b, 0x24, 0x55, 0x76, 0xf7, 0x78, 0x6f, 0xd4, 0x1f, 0xbb, 0x6c, 0xc7, 0xbd,
	0xd8, 0x54, 0x5b, 0x7b, 0xdd, 0xdb, 0xe5, 0xb0, 0xe3, 0xb7, 0x42, 0xf7, 0x8a, 0x3c, 0x9c, 0x14,
	0x22, 0xb9, 0x04, 0x25, 0x0b, 0x09, 0x29, 0xb5, 0xc9, 0x01, 0x76, 0x3a, 0x89, 0x6d, 0xe3, 0xd8,
	0x18, 0x75, 0xfd, 0x36, 0xa4, 0x47, 0x64, 0x3f, 0x87, 0x72, 0x12, 0xdb, 0x26, 0xe6, 0xeb, 0x80,
	0x0e, 0xc8, 0x83, 0xda, 0x6a, 0x12, 0xdb, 0x7b, 0xb8, 0xf1, 0x2f, 0x76, 0x7f, 0x18, 0xa4, 0x8f,
	0xb7, 0xbd, 0x0c, 0xf2, 0x20, 0x51, 0xf4, 0x05, 0x21, 0x68, 0x76, 0x5d, 0x54, 0x99, 0x40, 0x7b,
	0xcb, 0x7b, 0xfc, 0x67, 0x39, 0x3c, 0xac, 0x82, 0x64, 0xfe, 0xd2, 0xdd, 0xec, 0xb9, 0xbe, 0x85,
	0xc1, 0xb4, 0xca, 0x04, 0xfd, 0x42, 0x48, 0x96, 0xcb, 0x48, 0x5c, 0x6b, 0x34, 0xb6, 0x89, 0x8d,
	0x3e, 0x61, 0x35, 0x63, 0xa6, 0x19, 0xb3, 0x86, 0x31, 0x7b, 0x05, 0x32, 0xf5, 0xde, 0xe8, 0xfe,
	0x36, 0xa6, 0x1b, 0xa9, 0xfb, 0xfd, 0xd7, 0x70, 0x34, 0x93, 0xc5, 0xcd, 0x22, 0x64, 0x11, 0x24,
	0xbc, 0x79, 0xa5, 0xfa, 0xf7, 0x4c, 0xc5, 0x1f, 0xb9, 0x2e, 0xad, 0xd0, 0x45, 0xf9, 0x16, 0x0a,
	0x35, 0x32, 0xf7, 0xab, 0x49, 0x7a, 0xd8, 0x86, 0xa2, 0x8f, 0x88, 0x29, 0x5b, 0x30, 0xa6, 0x8c,
	0xe9, 0x6b, 0x62, 0x69, 0xb6, 0x17, 0x65, 0x2a, 0x72, 0xe4, 0xd2, 0x1f, 0x9f, 0xec, 0x7c, 0x03,
	0xaf, 0x3d, 0xed, 0x6f, 0x84, 0xf4, 0x8c, 0xf4, 0x32, 0x24, 0x84, 0x04, 0xfb, 0xe3, 0xd1, 0x4e,
	0x8b, 0x2d, 0xa2, 0x7e, 0xa3, 0xa3, 0x67, 0xa4, 0x9b, 0x43, 0xd9, 0x8e, 0xc1, 0xc9, 0xfd, 0x7a,
	0x3d, 0x3f, 0xcd, 0x28, 0xa0, 0x92, 0x3a, 0x84, 0x44, 0xb0, 0x48, 0x0b, 0x1c, 0x12, 0x7b, 0x1f,
	0x3b, 0xdc, 0xca, 0x78, 0xe7, 0xb7, 0x2b, 0xc7, 0xb8, 0x5b, 0x39, 0xc6, 0xef, 0x95, 0x63, 0x7c,
	0x5b, 0x3b, 0x9d, 0xbb, 0xb5, 0xd3, 0xf9, 0xb9, 0x76, 0x3a, 0x57, 0x6c, 0x8b, 0xe9, 0x56, 0x5d,
	0x7e, 0xae, 0xeb, 0xbe, 0x07, 0x88, 0xf9, 0x67, 0xde, 0xcc, 0xb6, 0xe6, 0x1b, 0xf6, 0x70, 0x92,
	0x9f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xbf, 0x70, 0x32, 0x58, 0x03, 0x00, 0x00,
}

func (m *FieldRows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldRows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFields(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	return len(dAtA) - i, nil
}

func (m *ItemPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnId != 0 {
		i = encodeVarintFields(dAtA, i, uint64(m.ColumnId))
		i--
		dAtA[i] = 0x18
	}
	if m.RowId != 0 {
		i = encodeVarintFields(dAtA, i, uint64(m.RowId))
		i--
		dAtA[i] = 0x10
	}
	if m.FieldId != 0 {
		i = encodeVarintFields(dAtA, i, uint64(m.FieldId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceTile) > 0 {
		for iNdEx := len(m.PriceTile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceTile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFields(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintFields(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountTiles != 0 {
		i = encodeVarintFields(dAtA, i, uint64(m.CountTiles))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFields(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFields(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BearOwner != nil {
		{
			size, err := m.BearOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFields(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFields(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFields(dAtA []byte, offset int, v uint64) int {
	offset -= sovFields(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FieldRows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovFields(uint64(l))
		}
	}
	return n
}

func (m *ItemPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldId != 0 {
		n += 1 + sovFields(uint64(m.FieldId))
	}
	if m.RowId != 0 {
		n += 1 + sovFields(uint64(m.RowId))
	}
	if m.ColumnId != 0 {
		n += 1 + sovFields(uint64(m.ColumnId))
	}
	return n
}

func (m *FieldParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovFields(uint64(l))
	}
	if len(m.PriceTile) > 0 {
		for _, e := range m.PriceTile {
			l = e.Size()
			n += 1 + l + sovFields(uint64(l))
		}
	}
	return n
}

func (m *Fields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFields(uint64(m.Id))
	}
	if m.BearOwner != nil {
		l = m.BearOwner.Size()
		n += 1 + l + sovFields(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovFields(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovFields(uint64(l))
		}
	}
	if m.CountTiles != 0 {
		n += 1 + sovFields(uint64(m.CountTiles))
	}
	return n
}

func sovFields(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFields(x uint64) (n int) {
	return sovFields(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldRows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFields
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldRows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldRows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, Tiles{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFields(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFields
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFields
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldId", wireType)
			}
			m.FieldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowId", wireType)
			}
			m.RowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnId", wireType)
			}
			m.ColumnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFields(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFields
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFields
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceTile = append(m.PriceTile, types.Coin{})
			if err := m.PriceTile[len(m.PriceTile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFields(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFields
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFields
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BearOwner == nil {
				m.BearOwner = &BearOwner{}
			}
			if err := m.BearOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &FieldParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFields
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, FieldRows{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountTiles", wireType)
			}
			m.CountTiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountTiles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFields(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFields
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFields(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFields
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFields
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFields
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFields
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFields
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFields
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFields        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFields          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFields = fmt.Errorf("proto: unexpected end of group")
)
