// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/trees.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TreeParams struct {
	TreeType  string                                   `protobuf:"bytes,1,opt,name=tree_type,json=treeType,proto3" json:"tree_type,omitempty" yaml:"tree_type"`
	Price     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price" yaml:"price"`
	Reward    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward" yaml:"reward"`
	AirSupply github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=air_supply,json=airSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"air_supply" yaml:"air_supply"`
}

func (m *TreeParams) Reset()         { *m = TreeParams{} }
func (m *TreeParams) String() string { return proto.CompactTextString(m) }
func (*TreeParams) ProtoMessage()    {}
func (*TreeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7453a7001a729ab, []int{0}
}
func (m *TreeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeParams.Merge(m, src)
}
func (m *TreeParams) XXX_Size() int {
	return m.Size()
}
func (m *TreeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeParams.DiscardUnknown(m)
}

var xxx_messageInfo_TreeParams proto.InternalMessageInfo

func (m *TreeParams) GetTreeType() string {
	if m != nil {
		return m.TreeType
	}
	return ""
}

func (m *TreeParams) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *TreeParams) GetReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Reward
	}
	return nil
}

type Trees struct {
	Id        uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Params    *TreeParams  `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	BearOwner *BearOwner   `protobuf:"bytes,3,opt,name=bearOwner,proto3" json:"bearOwner,omitempty"`
	Position  ItemPosition `protobuf:"bytes,4,opt,name=position,proto3" json:"position"`
}

func (m *Trees) Reset()         { *m = Trees{} }
func (m *Trees) String() string { return proto.CompactTextString(m) }
func (*Trees) ProtoMessage()    {}
func (*Trees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7453a7001a729ab, []int{1}
}
func (m *Trees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trees.Merge(m, src)
}
func (m *Trees) XXX_Size() int {
	return m.Size()
}
func (m *Trees) XXX_DiscardUnknown() {
	xxx_messageInfo_Trees.DiscardUnknown(m)
}

var xxx_messageInfo_Trees proto.InternalMessageInfo

func (m *Trees) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Trees) GetParams() *TreeParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Trees) GetBearOwner() *BearOwner {
	if m != nil {
		return m.BearOwner
	}
	return nil
}

func (m *Trees) GetPosition() ItemPosition {
	if m != nil {
		return m.Position
	}
	return ItemPosition{}
}

func init() {
	proto.RegisterType((*TreeParams)(nil), "MonetaToday.honeywood.bears.TreeParams")
	proto.RegisterType((*Trees)(nil), "MonetaToday.honeywood.bears.Trees")
}

func init() { proto.RegisterFile("bears/trees.proto", fileDescriptor_a7453a7001a729ab) }

var fileDescriptor_a7453a7001a729ab = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x24, 0x8d, 0x9a, 0x0d, 0x20, 0xba, 0xea, 0xc1, 0x04, 0xc9, 0x8e, 0x72, 0x28,
	0xe1, 0xc0, 0xae, 0x12, 0x6e, 0x5c, 0x00, 0xb7, 0x87, 0x22, 0x84, 0xa8, 0x4c, 0x24, 0x24, 0x2e,
	0xd5, 0xda, 0x5e, 0xd2, 0x15, 0xb1, 0xd7, 0xec, 0x6e, 0x09, 0x7e, 0x07, 0x0e, 0x3c, 0x07, 0x4f,
	0xd2, 0x63, 0x8f, 0x88, 0x83, 0x41, 0xc9, 0x91, 0x5b, 0x9e, 0x00, 0xed, 0x1f, 0x9a, 0x9e, 0x02,
	0xbd, 0xd8, 0x23, 0xcf, 0x7c, 0xbf, 0x6f, 0x3c, 0xb3, 0x0b, 0xf6, 0x12, 0x4a, 0x84, 0xc4, 0x4a,
	0x50, 0x2a, 0x51, 0x29, 0xb8, 0xe2, 0xf0, 0xfe, 0x2b, 0x5e, 0x50, 0x45, 0xa6, 0x3c, 0x23, 0x15,
	0x3a, 0xe3, 0x05, 0xad, 0x16, 0x9c, 0x67, 0xc8, 0x14, 0xf6, 0xf7, 0x67, 0x7c, 0xc6, 0x4d, 0x1d,
	0xd6, 0x91, 0x95, 0xf4, 0x83, 0x94, 0xcb, 0x9c, 0x4b, 0x9c, 0x10, 0x49, 0xf1, 0xa7, 0x71, 0x42,
	0x15, 0x19, 0xe3, 0x94, 0xb3, 0xc2, 0xe5, 0xa1, 0x75, 0x79, 0xcf, 0xe8, 0x3c, 0x73, 0x36, 0x7d,
	0xe7, 0x6c, 0x9e, 0xf6, 0xd3, 0xf0, 0x4b, 0x0b, 0x80, 0xa9, 0xa0, 0xf4, 0x84, 0x08, 0x92, 0x4b,
	0x38, 0x06, 0x5d, 0xdd, 0xd7, 0xa9, 0xaa, 0x4a, 0xea, 0x7b, 0x03, 0x6f, 0xd4, 0x8d, 0xf6, 0xd7,
	0x75, 0x78, 0xb7, 0x22, 0xf9, 0xfc, 0xc9, 0xf0, 0x2a, 0x35, 0x8c, 0x77, 0x75, 0x3c, 0xad, 0x4a,
	0x0a, 0x3f, 0x82, 0x9d, 0x52, 0xb0, 0x94, 0xfa, 0xcd, 0x41, 0x6b, 0xd4, 0x9b, 0xdc, 0x43, 0xb6,
	0x31, 0xa4, 0x1b, 0x43, 0xae, 0x31, 0x74, 0xc8, 0x59, 0x11, 0x3d, 0xbb, 0xa8, 0xc3, 0xc6, 0xba,
	0x0e, 0x6f, 0x59, 0x9a, 0x51, 0x0d, 0xbf, 0xfd, 0x0c, 0x47, 0x33, 0xa6, 0xce, 0xce, 0x13, 0x94,
	0xf2, 0x1c, 0xbb, 0xbf, 0xb2, 0xaf, 0x47, 0x32, 0xfb, 0x80, 0xb5, 0x9f, 0x34, 0x00, 0x19, 0x5b,
	0x27, 0xa8, 0x40, 0x47, 0xd0, 0x05, 0x11, 0x99, 0xdf, 0xfa, 0x97, 0xe7, 0x73, 0xe7, 0x79, 0xdb,
	0x7a, 0x5a, 0xd9, 0xcd, 0x4c, 0x9d, 0x17, 0x4c, 0x00, 0x20, 0x4c, 0x9c, 0xca, 0xf3, 0xb2, 0x9c,
	0x57, 0x7e, 0xdb, 0x0c, 0xe7, 0x50, 0xe3, 0x7f, 0xd4, 0xe1, 0xc1, 0x7f, 0xd0, 0x8e, 0x68, 0xba,
	0xae, 0xc3, 0x3d, 0xdb, 0xc8, 0x86, 0x34, 0x8c, 0xbb, 0x84, 0x89, 0x37, 0x36, 0xfe, 0xed, 0x81,
	0x1d, 0xbd, 0x0e, 0x09, 0xef, 0x80, 0x26, 0xcb, 0xcc, 0x0a, 0xda, 0x71, 0x93, 0x65, 0xf0, 0x29,
	0xe8, 0x94, 0x66, 0x47, 0x7e, 0x73, 0xe0, 0x8d, 0x7a, 0x93, 0x07, 0x68, 0xcb, 0x99, 0x41, 0x9b,
	0x95, 0xc6, 0x4e, 0x06, 0x8f, 0x40, 0x57, 0xe7, 0x5e, 0x2f, 0x0a, 0x2a, 0xfc, 0x96, 0x61, 0x1c,
	0x6c, 0x65, 0x44, 0x7f, 0xab, 0xe3, 0x8d, 0x10, 0xbe, 0x04, 0xbb, 0x25, 0x97, 0x4c, 0x31, 0x5e,
	0x98, 0x11, 0xf4, 0x26, 0x0f, 0xb7, 0x42, 0x5e, 0x28, 0x9a, 0x9f, 0x38, 0x41, 0xd4, 0xd6, 0xd3,
	0x8a, 0xaf, 0x00, 0xd1, 0xf1, 0xc5, 0x32, 0xf0, 0x2e, 0x97, 0x81, 0xf7, 0x6b, 0x19, 0x78, 0x5f,
	0x57, 0x41, 0xe3, 0x72, 0x15, 0x34, 0xbe, 0xaf, 0x82, 0xc6, 0x3b, 0x74, 0x6d, 0x9e, 0xd7, 0xf0,
	0xf8, 0x58, 0xe3, 0xdf, 0x72, 0x9e, 0xe1, 0xcf, 0xd8, 0x5d, 0x23, 0x3d, 0xdb, 0xa4, 0x63, 0x4e,
	0xf3, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x90, 0x91, 0x27, 0x5c, 0x03, 0x00, 0x00,
}

func (m *TreeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AirSupply.Size()
		i -= size
		if _, err := m.AirSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTrees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TreeType) > 0 {
		i -= len(m.TreeType)
		copy(dAtA[i:], m.TreeType)
		i = encodeVarintTrees(dAtA, i, uint64(len(m.TreeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Trees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTrees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BearOwner != nil {
		{
			size, err := m.BearOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrees(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrees(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrees(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TreeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TreeType)
	if l > 0 {
		n += 1 + l + sovTrees(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTrees(uint64(l))
		}
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovTrees(uint64(l))
		}
	}
	l = m.AirSupply.Size()
	n += 1 + l + sovTrees(uint64(l))
	return n
}

func (m *Trees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrees(uint64(m.Id))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTrees(uint64(l))
	}
	if m.BearOwner != nil {
		l = m.BearOwner.Size()
		n += 1 + l + sovTrees(uint64(l))
	}
	l = m.Position.Size()
	n += 1 + l + sovTrees(uint64(l))
	return n
}

func sovTrees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrees(x uint64) (n int) {
	return sovTrees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TreeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AirSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &TreeParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BearOwner == nil {
				m.BearOwner = &BearOwner{}
			}
			if err := m.BearOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrees = fmt.Errorf("proto: unexpected end of group")
)
