// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/trees.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Trees_TreeTypes int32

const (
	Trees_OAK       Trees_TreeTypes = 0
	Trees_SPRUCE    Trees_TreeTypes = 1
	Trees_APPLETREE Trees_TreeTypes = 2
	Trees_WILLOW    Trees_TreeTypes = 3
)

var Trees_TreeTypes_name = map[int32]string{
	0: "OAK",
	1: "SPRUCE",
	2: "APPLETREE",
	3: "WILLOW",
}

var Trees_TreeTypes_value = map[string]int32{
	"OAK":       0,
	"SPRUCE":    1,
	"APPLETREE": 2,
	"WILLOW":    3,
}

func (x Trees_TreeTypes) String() string {
	return proto.EnumName(Trees_TreeTypes_name, int32(x))
}

func (Trees_TreeTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a7453a7001a729ab, []int{0, 0}
}

type Trees struct {
	Id       uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TreeType Trees_TreeTypes `protobuf:"varint,2,opt,name=treeType,proto3,enum=MonetaToday.honeywood.bears.Trees_TreeTypes" json:"treeType,omitempty"`
	BearId   uint64          `protobuf:"varint,3,opt,name=bearId,proto3" json:"bearId,omitempty"`
	FieldId  uint64          `protobuf:"varint,4,opt,name=fieldId,proto3" json:"fieldId,omitempty"`
	TileId   uint64          `protobuf:"varint,5,opt,name=tileId,proto3" json:"tileId,omitempty"`
}

func (m *Trees) Reset()         { *m = Trees{} }
func (m *Trees) String() string { return proto.CompactTextString(m) }
func (*Trees) ProtoMessage()    {}
func (*Trees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7453a7001a729ab, []int{0}
}
func (m *Trees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trees.Merge(m, src)
}
func (m *Trees) XXX_Size() int {
	return m.Size()
}
func (m *Trees) XXX_DiscardUnknown() {
	xxx_messageInfo_Trees.DiscardUnknown(m)
}

var xxx_messageInfo_Trees proto.InternalMessageInfo

func (m *Trees) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Trees) GetTreeType() Trees_TreeTypes {
	if m != nil {
		return m.TreeType
	}
	return Trees_OAK
}

func (m *Trees) GetBearId() uint64 {
	if m != nil {
		return m.BearId
	}
	return 0
}

func (m *Trees) GetFieldId() uint64 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *Trees) GetTileId() uint64 {
	if m != nil {
		return m.TileId
	}
	return 0
}

func init() {
	proto.RegisterEnum("MonetaToday.honeywood.bears.Trees_TreeTypes", Trees_TreeTypes_name, Trees_TreeTypes_value)
	proto.RegisterType((*Trees)(nil), "MonetaToday.honeywood.bears.Trees")
}

func init() { proto.RegisterFile("bears/trees.proto", fileDescriptor_a7453a7001a729ab) }

var fileDescriptor_a7453a7001a729ab = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4a, 0x4d, 0x2c,
	0x2a, 0xd6, 0x2f, 0x29, 0x4a, 0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xf6,
	0xcd, 0xcf, 0x4b, 0x2d, 0x49, 0x0c, 0xc9, 0x4f, 0x49, 0xac, 0xd4, 0xcb, 0xc8, 0xcf, 0x4b, 0xad,
	0x2c, 0xcf, 0xcf, 0x4f, 0xd1, 0x03, 0x2b, 0x54, 0x7a, 0xc1, 0xc8, 0xc5, 0x1a, 0x02, 0x52, 0x2c,
	0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x94, 0x99, 0x22,
	0xe4, 0xc1, 0xc5, 0x01, 0x32, 0x25, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0xcf,
	0x48, 0x47, 0x0f, 0x8f, 0x49, 0x7a, 0x60, 0x53, 0xc0, 0x24, 0x48, 0x4b, 0x71, 0x10, 0x5c, 0xb7,
	0x90, 0x18, 0x17, 0x1b, 0x48, 0x89, 0x67, 0x8a, 0x04, 0x33, 0xd8, 0x74, 0x28, 0x4f, 0x48, 0x82,
	0x8b, 0x3d, 0x2d, 0x33, 0x35, 0x27, 0xc5, 0x33, 0x45, 0x82, 0x05, 0x2c, 0x01, 0xe3, 0x82, 0x74,
	0x94, 0x64, 0xe6, 0xa4, 0x7a, 0xa6, 0x48, 0xb0, 0x42, 0x74, 0x40, 0x78, 0x4a, 0xd6, 0x5c, 0x9c,
	0x70, 0x0b, 0x84, 0xd8, 0xb9, 0x98, 0xfd, 0x1d, 0xbd, 0x05, 0x18, 0x84, 0xb8, 0xb8, 0xd8, 0x82,
	0x03, 0x82, 0x42, 0x9d, 0x5d, 0x05, 0x18, 0x85, 0x78, 0xb9, 0x38, 0x1d, 0x03, 0x02, 0x7c, 0x5c,
	0x43, 0x82, 0x5c, 0x5d, 0x05, 0x98, 0x40, 0x52, 0xe1, 0x9e, 0x3e, 0x3e, 0xfe, 0xe1, 0x02, 0xcc,
	0x4e, 0x1e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84,
	0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x97, 0x9e, 0x59,
	0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0xe4, 0x45, 0x7d, 0x0f, 0x90, 0x17, 0xc3,
	0xf3, 0xf3, 0x53, 0xf4, 0x2b, 0xf4, 0xa1, 0xe1, 0x0a, 0xb2, 0x39, 0x89, 0x0d, 0x1c, 0xb0, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x93, 0x92, 0xd1, 0x6d, 0x01, 0x00, 0x00,
}

func (m *Trees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TileId != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.TileId))
		i--
		dAtA[i] = 0x28
	}
	if m.FieldId != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.FieldId))
		i--
		dAtA[i] = 0x20
	}
	if m.BearId != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.BearId))
		i--
		dAtA[i] = 0x18
	}
	if m.TreeType != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.TreeType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTrees(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrees(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Trees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrees(uint64(m.Id))
	}
	if m.TreeType != 0 {
		n += 1 + sovTrees(uint64(m.TreeType))
	}
	if m.BearId != 0 {
		n += 1 + sovTrees(uint64(m.BearId))
	}
	if m.FieldId != 0 {
		n += 1 + sovTrees(uint64(m.FieldId))
	}
	if m.TileId != 0 {
		n += 1 + sovTrees(uint64(m.TileId))
	}
	return n
}

func sovTrees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrees(x uint64) (n int) {
	return sovTrees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeType", wireType)
			}
			m.TreeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeType |= Trees_TreeTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearId", wireType)
			}
			m.BearId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BearId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldId", wireType)
			}
			m.FieldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TileId", wireType)
			}
			m.TileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TileId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrees = fmt.Errorf("proto: unexpected end of group")
)
