// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/bears.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BearOwner struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BearOwner) Reset()         { *m = BearOwner{} }
func (m *BearOwner) String() string { return proto.CompactTextString(m) }
func (*BearOwner) ProtoMessage()    {}
func (*BearOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4f60dbaf3b8894, []int{0}
}
func (m *BearOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BearOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BearOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BearOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BearOwner.Merge(m, src)
}
func (m *BearOwner) XXX_Size() int {
	return m.Size()
}
func (m *BearOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_BearOwner.DiscardUnknown(m)
}

var xxx_messageInfo_BearOwner proto.InternalMessageInfo

func (m *BearOwner) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Bears struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner       string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Fields      []uint64 `protobuf:"varint,4,rep,packed,name=fields,proto3" json:"fields,omitempty"`
	Apiaries    []uint64 `protobuf:"varint,5,rep,packed,name=apiaries,proto3" json:"apiaries,omitempty"`
	Bees        []uint64 `protobuf:"varint,6,rep,packed,name=bees,proto3" json:"bees,omitempty"`
	Trees       []uint64 `protobuf:"varint,7,rep,packed,name=trees,proto3" json:"trees,omitempty"`
	Decorations []uint64 `protobuf:"varint,8,rep,packed,name=decorations,proto3" json:"decorations,omitempty"`
}

func (m *Bears) Reset()         { *m = Bears{} }
func (m *Bears) String() string { return proto.CompactTextString(m) }
func (*Bears) ProtoMessage()    {}
func (*Bears) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4f60dbaf3b8894, []int{1}
}
func (m *Bears) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bears) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bears.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bears) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bears.Merge(m, src)
}
func (m *Bears) XXX_Size() int {
	return m.Size()
}
func (m *Bears) XXX_DiscardUnknown() {
	xxx_messageInfo_Bears.DiscardUnknown(m)
}

var xxx_messageInfo_Bears proto.InternalMessageInfo

func (m *Bears) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bears) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Bears) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bears) GetFields() []uint64 {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Bears) GetApiaries() []uint64 {
	if m != nil {
		return m.Apiaries
	}
	return nil
}

func (m *Bears) GetBees() []uint64 {
	if m != nil {
		return m.Bees
	}
	return nil
}

func (m *Bears) GetTrees() []uint64 {
	if m != nil {
		return m.Trees
	}
	return nil
}

func (m *Bears) GetDecorations() []uint64 {
	if m != nil {
		return m.Decorations
	}
	return nil
}

func init() {
	proto.RegisterType((*BearOwner)(nil), "MonetaToday.honeywood.bears.BearOwner")
	proto.RegisterType((*Bears)(nil), "MonetaToday.honeywood.bears.Bears")
}

func init() { proto.RegisterFile("bears/bears.proto", fileDescriptor_9f4f60dbaf3b8894) }

var fileDescriptor_9f4f60dbaf3b8894 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xec, 0x30,
	0x14, 0x86, 0x9b, 0x4e, 0xdb, 0x3b, 0x93, 0x0b, 0x82, 0x41, 0x24, 0x38, 0x10, 0xca, 0xac, 0xba,
	0x6a, 0x17, 0xbe, 0xc1, 0xac, 0x66, 0x23, 0x42, 0x11, 0x04, 0x77, 0xe9, 0xe4, 0xe8, 0x04, 0x9c,
	0x9e, 0x92, 0x44, 0xc6, 0xbe, 0x85, 0xaf, 0xe4, 0xce, 0xe5, 0x2c, 0x5d, 0x4a, 0xfb, 0x22, 0x92,
	0x54, 0x64, 0x70, 0x13, 0xce, 0xff, 0xfd, 0x49, 0x0e, 0x7c, 0xf4, 0xbc, 0x01, 0x69, 0x6c, 0x15,
	0xce, 0xb2, 0x33, 0xe8, 0x90, 0x2d, 0x6f, 0xb0, 0x05, 0x27, 0xef, 0x50, 0xc9, 0xbe, 0xdc, 0x61,
	0x0b, 0xfd, 0x01, 0x51, 0x95, 0xe1, 0xca, 0x6a, 0x49, 0x17, 0x6b, 0x90, 0xe6, 0xf6, 0xd0, 0x82,
	0x61, 0x67, 0x34, 0xd6, 0x8a, 0x93, 0x9c, 0x14, 0x49, 0x1d, 0x6b, 0xb5, 0x7a, 0x27, 0x34, 0xf5,
	0xad, 0xfd, 0xdb, 0xb0, 0x0b, 0x9a, 0xa2, 0x7f, 0xc2, 0xe3, 0x9c, 0x14, 0x8b, 0x7a, 0x0a, 0x8c,
	0xd1, 0xa4, 0x95, 0x7b, 0xe0, 0xb3, 0x00, 0xc3, 0xcc, 0x2e, 0x69, 0xf6, 0xa8, 0xe1, 0x59, 0x59,
	0x9e, 0xe4, 0xb3, 0x22, 0xa9, 0x7f, 0x12, 0xbb, 0xa2, 0x73, 0xd9, 0x69, 0x69, 0x34, 0x58, 0x9e,
	0x86, 0xe6, 0x37, 0xfb, 0x7f, 0x1a, 0x00, 0xcb, 0xb3, 0xc0, 0xc3, 0xec, 0x37, 0x3a, 0xe3, 0xe1,
	0xbf, 0x00, 0xa7, 0xc0, 0x72, 0xfa, 0x5f, 0xc1, 0x16, 0x8d, 0x74, 0x1a, 0x5b, 0xcb, 0xe7, 0xa1,
	0x3b, 0x45, 0xeb, 0xcd, 0xc7, 0x20, 0xc8, 0x71, 0x10, 0xe4, 0x6b, 0x10, 0xe4, 0x6d, 0x14, 0xd1,
	0x71, 0x14, 0xd1, 0xe7, 0x28, 0xa2, 0x87, 0xf2, 0x49, 0xbb, 0xdd, 0x4b, 0x53, 0x6e, 0x71, 0x5f,
	0x9d, 0x28, 0xaa, 0x36, 0x5e, 0xd1, 0x3d, 0xa2, 0xaa, 0x5e, 0x27, 0x8f, 0x95, 0xeb, 0x3b, 0xb0,
	0x4d, 0x16, 0x74, 0x5e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x40, 0x55, 0x6a, 0xc7, 0x63, 0x01,
	0x00, 0x00,
}

func (m *BearOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BearOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BearOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintBears(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bears) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bears) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bears) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decorations) > 0 {
		dAtA2 := make([]byte, len(m.Decorations)*10)
		var j1 int
		for _, num := range m.Decorations {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBears(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Trees) > 0 {
		dAtA4 := make([]byte, len(m.Trees)*10)
		var j3 int
		for _, num := range m.Trees {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBears(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bees) > 0 {
		dAtA6 := make([]byte, len(m.Bees)*10)
		var j5 int
		for _, num := range m.Bees {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintBears(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Apiaries) > 0 {
		dAtA8 := make([]byte, len(m.Apiaries)*10)
		var j7 int
		for _, num := range m.Apiaries {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintBears(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fields) > 0 {
		dAtA10 := make([]byte, len(m.Fields)*10)
		var j9 int
		for _, num := range m.Fields {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintBears(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBears(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBears(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBears(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBears(dAtA []byte, offset int, v uint64) int {
	offset -= sovBears(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BearOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBears(uint64(m.Id))
	}
	return n
}

func (m *Bears) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBears(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBears(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBears(uint64(l))
	}
	if len(m.Fields) > 0 {
		l = 0
		for _, e := range m.Fields {
			l += sovBears(uint64(e))
		}
		n += 1 + sovBears(uint64(l)) + l
	}
	if len(m.Apiaries) > 0 {
		l = 0
		for _, e := range m.Apiaries {
			l += sovBears(uint64(e))
		}
		n += 1 + sovBears(uint64(l)) + l
	}
	if len(m.Bees) > 0 {
		l = 0
		for _, e := range m.Bees {
			l += sovBears(uint64(e))
		}
		n += 1 + sovBears(uint64(l)) + l
	}
	if len(m.Trees) > 0 {
		l = 0
		for _, e := range m.Trees {
			l += sovBears(uint64(e))
		}
		n += 1 + sovBears(uint64(l)) + l
	}
	if len(m.Decorations) > 0 {
		l = 0
		for _, e := range m.Decorations {
			l += sovBears(uint64(e))
		}
		n += 1 + sovBears(uint64(l)) + l
	}
	return n
}

func sovBears(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBears(x uint64) (n int) {
	return sovBears(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BearOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBears
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BearOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BearOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBears
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBears(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBears
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bears) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBears
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bears: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bears: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBears
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBears
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBears
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBears
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBears
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBears
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBears
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Fields = append(m.Fields, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBears
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBears
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Fields) == 0 {
					m.Fields = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBears
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Fields = append(m.Fields, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Apiaries = append(m.Apiaries, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBears
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBears
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Apiaries) == 0 {
					m.Apiaries = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBears
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Apiaries = append(m.Apiaries, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Apiaries", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bees = append(m.Bees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBears
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBears
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bees) == 0 {
					m.Bees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBears
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bees = append(m.Bees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bees", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Trees = append(m.Trees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBears
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBears
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Trees) == 0 {
					m.Trees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBears
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Trees = append(m.Trees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Trees", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Decorations = append(m.Decorations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBears
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBears
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBears
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Decorations) == 0 {
					m.Decorations = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBears
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Decorations = append(m.Decorations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Decorations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBears(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBears
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBears(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBears
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBears
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBears
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBears
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBears
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBears
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBears        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBears          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBears = fmt.Errorf("proto: unexpected end of group")
)
