// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/apiaries.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Apiaries_ApiaryTypes int32

const (
	Apiaries_BEE_HOUSE Apiaries_ApiaryTypes = 0
	Apiaries_APIARY    Apiaries_ApiaryTypes = 1
	Apiaries_ALVEARY   Apiaries_ApiaryTypes = 2
)

var Apiaries_ApiaryTypes_name = map[int32]string{
	0: "BEE_HOUSE",
	1: "APIARY",
	2: "ALVEARY",
}

var Apiaries_ApiaryTypes_value = map[string]int32{
	"BEE_HOUSE": 0,
	"APIARY":    1,
	"ALVEARY":   2,
}

func (x Apiaries_ApiaryTypes) String() string {
	return proto.EnumName(Apiaries_ApiaryTypes_name, int32(x))
}

func (Apiaries_ApiaryTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{2, 0}
}

type ApiaryParams struct {
	Price         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price" yaml:"price"`
	MaxCountBees  uint64                                   `protobuf:"varint,2,opt,name=max_count_bees,json=maxCountBees,proto3" json:"max_count_bees,omitempty" yaml:"max_count_bees"`
	MaxCountHoney uint64                                   `protobuf:"varint,3,opt,name=max_count_honey,json=maxCountHoney,proto3" json:"max_count_honey,omitempty" yaml:"max_count_honey"`
}

func (m *ApiaryParams) Reset()         { *m = ApiaryParams{} }
func (m *ApiaryParams) String() string { return proto.CompactTextString(m) }
func (*ApiaryParams) ProtoMessage()    {}
func (*ApiaryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{0}
}
func (m *ApiaryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiaryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiaryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiaryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiaryParams.Merge(m, src)
}
func (m *ApiaryParams) XXX_Size() int {
	return m.Size()
}
func (m *ApiaryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiaryParams.DiscardUnknown(m)
}

var xxx_messageInfo_ApiaryParams proto.InternalMessageInfo

func (m *ApiaryParams) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *ApiaryParams) GetMaxCountBees() uint64 {
	if m != nil {
		return m.MaxCountBees
	}
	return 0
}

func (m *ApiaryParams) GetMaxCountHoney() uint64 {
	if m != nil {
		return m.MaxCountHoney
	}
	return 0
}

type CycleBeesHistory struct {
	Block uint64   `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	Bees  []uint64 `protobuf:"varint,2,rep,packed,name=bees,proto3" json:"bees,omitempty"`
}

func (m *CycleBeesHistory) Reset()         { *m = CycleBeesHistory{} }
func (m *CycleBeesHistory) String() string { return proto.CompactTextString(m) }
func (*CycleBeesHistory) ProtoMessage()    {}
func (*CycleBeesHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{1}
}
func (m *CycleBeesHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CycleBeesHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CycleBeesHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CycleBeesHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CycleBeesHistory.Merge(m, src)
}
func (m *CycleBeesHistory) XXX_Size() int {
	return m.Size()
}
func (m *CycleBeesHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_CycleBeesHistory.DiscardUnknown(m)
}

var xxx_messageInfo_CycleBeesHistory proto.InternalMessageInfo

func (m *CycleBeesHistory) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *CycleBeesHistory) GetBees() []uint64 {
	if m != nil {
		return m.Bees
	}
	return nil
}

type Apiaries struct {
	Id               uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BearOwner        *BearOwner           `protobuf:"bytes,2,opt,name=bearOwner,proto3" json:"bearOwner,omitempty"`
	ApiaryType       Apiaries_ApiaryTypes `protobuf:"varint,3,opt,name=apiaryType,proto3,enum=MonetaToday.honeywood.bears.Apiaries_ApiaryTypes" json:"apiaryType,omitempty"`
	Position         ItemPosition         `protobuf:"bytes,4,opt,name=position,proto3" json:"position"`
	CountBees        uint64               `protobuf:"varint,5,opt,name=countBees,proto3" json:"countBees,omitempty"`
	Params           ApiaryParams         `protobuf:"bytes,6,opt,name=params,proto3" json:"params"`
	CycleStartBlock  uint64               `protobuf:"varint,7,opt,name=cycleStartBlock,proto3" json:"cycleStartBlock,omitempty"`
	CycleBeesHistory []CycleBeesHistory   `protobuf:"bytes,8,rep,name=cycleBeesHistory,proto3" json:"cycleBeesHistory"`
}

func (m *Apiaries) Reset()         { *m = Apiaries{} }
func (m *Apiaries) String() string { return proto.CompactTextString(m) }
func (*Apiaries) ProtoMessage()    {}
func (*Apiaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{2}
}
func (m *Apiaries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Apiaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Apiaries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Apiaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Apiaries.Merge(m, src)
}
func (m *Apiaries) XXX_Size() int {
	return m.Size()
}
func (m *Apiaries) XXX_DiscardUnknown() {
	xxx_messageInfo_Apiaries.DiscardUnknown(m)
}

var xxx_messageInfo_Apiaries proto.InternalMessageInfo

func (m *Apiaries) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Apiaries) GetBearOwner() *BearOwner {
	if m != nil {
		return m.BearOwner
	}
	return nil
}

func (m *Apiaries) GetApiaryType() Apiaries_ApiaryTypes {
	if m != nil {
		return m.ApiaryType
	}
	return Apiaries_BEE_HOUSE
}

func (m *Apiaries) GetPosition() ItemPosition {
	if m != nil {
		return m.Position
	}
	return ItemPosition{}
}

func (m *Apiaries) GetCountBees() uint64 {
	if m != nil {
		return m.CountBees
	}
	return 0
}

func (m *Apiaries) GetParams() ApiaryParams {
	if m != nil {
		return m.Params
	}
	return ApiaryParams{}
}

func (m *Apiaries) GetCycleStartBlock() uint64 {
	if m != nil {
		return m.CycleStartBlock
	}
	return 0
}

func (m *Apiaries) GetCycleBeesHistory() []CycleBeesHistory {
	if m != nil {
		return m.CycleBeesHistory
	}
	return nil
}

func init() {
	proto.RegisterEnum("MonetaToday.honeywood.bears.Apiaries_ApiaryTypes", Apiaries_ApiaryTypes_name, Apiaries_ApiaryTypes_value)
	proto.RegisterType((*ApiaryParams)(nil), "MonetaToday.honeywood.bears.ApiaryParams")
	proto.RegisterType((*CycleBeesHistory)(nil), "MonetaToday.honeywood.bears.CycleBeesHistory")
	proto.RegisterType((*Apiaries)(nil), "MonetaToday.honeywood.bears.Apiaries")
}

func init() { proto.RegisterFile("bears/apiaries.proto", fileDescriptor_e18fa6f115c398f1) }

var fileDescriptor_e18fa6f115c398f1 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x8e, 0xd2, 0x4c,
	0x14, 0xa6, 0x6c, 0x61, 0x61, 0x60, 0x59, 0xfe, 0x09, 0xbf, 0xe9, 0xa2, 0x29, 0x9b, 0x5e, 0x18,
	0xbc, 0xd8, 0x36, 0x60, 0xbc, 0x31, 0x26, 0x4a, 0x91, 0xc8, 0x46, 0xcd, 0x62, 0x77, 0xd5, 0xe8,
	0x0d, 0x99, 0xb6, 0x23, 0x3b, 0x59, 0xda, 0xa9, 0x9d, 0xae, 0x4b, 0x5f, 0xc0, 0x6b, 0x5f, 0x43,
	0x9f, 0x64, 0x2f, 0xf7, 0xd2, 0x2b, 0x34, 0xf0, 0x06, 0x3c, 0x81, 0xe9, 0x4c, 0x11, 0xc4, 0x84,
	0x78, 0x03, 0x73, 0x4e, 0xcf, 0xf9, 0xbe, 0x6f, 0xe6, 0x3b, 0x07, 0xd4, 0x6c, 0x8c, 0x42, 0x66,
	0xa0, 0x80, 0xa0, 0x90, 0x60, 0xa6, 0x07, 0x21, 0x8d, 0x28, 0xbc, 0xfd, 0x92, 0xfa, 0x38, 0x42,
	0x67, 0xd4, 0x45, 0xb1, 0x7e, 0x4e, 0x7d, 0x1c, 0x5f, 0x51, 0xea, 0xea, 0xbc, 0xb6, 0xae, 0x3a,
	0x94, 0x79, 0x94, 0x19, 0x36, 0x62, 0xd8, 0xf8, 0xd4, 0xb2, 0x71, 0x84, 0x5a, 0x86, 0x43, 0x89,
	0x2f, 0x9a, 0xeb, 0xb5, 0x11, 0x1d, 0x51, 0x7e, 0x34, 0x92, 0x53, 0x9a, 0x85, 0x82, 0xe8, 0x03,
	0xc1, 0x63, 0x37, 0xa5, 0xa9, 0xff, 0x27, 0x72, 0xfc, 0x57, 0xa4, 0xb4, 0xcf, 0x59, 0x50, 0xee,
	0x24, 0x62, 0xe2, 0x01, 0x0a, 0x91, 0xc7, 0xe0, 0x47, 0x90, 0x0b, 0x42, 0xe2, 0x60, 0x45, 0x3a,
	0xdc, 0x69, 0x96, 0xda, 0x07, 0xba, 0x60, 0xd7, 0x13, 0x76, 0x3d, 0x65, 0xd7, 0xbb, 0x94, 0xf8,
	0xe6, 0x93, 0xeb, 0x69, 0x23, 0xb3, 0x98, 0x36, 0xca, 0x31, 0xf2, 0xc6, 0x0f, 0x35, 0xde, 0xa5,
	0x7d, 0xfb, 0xd1, 0x68, 0x8e, 0x48, 0x74, 0x7e, 0x69, 0xeb, 0x0e, 0xf5, 0x8c, 0x54, 0xba, 0xf8,
	0x3b, 0x62, 0xee, 0x85, 0x11, 0xc5, 0x01, 0x66, 0x1c, 0x80, 0x59, 0x82, 0x09, 0x3e, 0x06, 0x15,
	0x0f, 0x4d, 0x86, 0x0e, 0xbd, 0xf4, 0xa3, 0xa1, 0x8d, 0x31, 0x53, 0xb2, 0x87, 0x52, 0x53, 0x36,
	0x0f, 0x16, 0xd3, 0xc6, 0xff, 0x02, 0xfc, 0xcf, 0xef, 0x9a, 0x55, 0xf6, 0xd0, 0xa4, 0x9b, 0xc4,
	0x26, 0xc6, 0x0c, 0x9a, 0x60, 0x7f, 0x55, 0xc0, 0x9f, 0x4f, 0xd9, 0xe1, 0x08, 0xf5, 0xc5, 0xb4,
	0x71, 0x6b, 0x13, 0x81, 0x17, 0x68, 0xd6, 0xde, 0x12, 0xa2, 0xcf, 0xe3, 0x47, 0xa0, 0xda, 0x8d,
	0x9d, 0x31, 0x4e, 0x00, 0xfb, 0x84, 0x45, 0x34, 0x8c, 0x61, 0x0d, 0xe4, 0xec, 0x31, 0x75, 0x2e,
	0x14, 0x29, 0x41, 0xb3, 0x44, 0x00, 0x21, 0x90, 0x53, 0x91, 0x3b, 0x4d, 0xd9, 0xe2, 0x67, 0xed,
	0xab, 0x0c, 0x0a, 0x9d, 0xd4, 0x53, 0x58, 0x01, 0x59, 0xe2, 0xa6, 0x3d, 0x59, 0xe2, 0xc2, 0xa7,
	0xa0, 0x98, 0x3c, 0xf9, 0xc9, 0x95, 0x8f, 0x43, 0x7e, 0xb5, 0x52, 0xfb, 0xae, 0xbe, 0xc5, 0x71,
	0xdd, 0x5c, 0x56, 0x5b, 0xab, 0x46, 0xf8, 0x0a, 0x00, 0x3e, 0x35, 0xf1, 0x59, 0x1c, 0x60, 0x7e,
	0xbf, 0x4a, 0xbb, 0xb5, 0x15, 0x66, 0x29, 0x48, 0x1c, 0x78, 0x1f, 0xb3, 0xd6, 0x40, 0xe0, 0x73,
	0x50, 0x08, 0x28, 0x23, 0x11, 0xa1, 0xbe, 0x22, 0x73, 0x5d, 0xf7, 0xb6, 0x02, 0x1e, 0x47, 0xd8,
	0x1b, 0xa4, 0x0d, 0xa6, 0x9c, 0xd8, 0x6f, 0xfd, 0x06, 0x80, 0x77, 0x40, 0xd1, 0x59, 0x3a, 0xa2,
	0xe4, 0xf8, 0xe5, 0x57, 0x09, 0xf8, 0x0c, 0xe4, 0x03, 0x3e, 0x60, 0x4a, 0xfe, 0x1f, 0x88, 0xd6,
	0x27, 0x32, 0x25, 0x4a, 0xdb, 0x61, 0x13, 0xec, 0x3b, 0x89, 0x4f, 0xa7, 0x11, 0x0a, 0x23, 0x93,
	0xbb, 0xb3, 0xcb, 0xc9, 0x36, 0xd3, 0x70, 0x08, 0xaa, 0xce, 0x86, 0xa3, 0x4a, 0x81, 0x0f, 0xf5,
	0xd1, 0x56, 0xf2, 0xcd, 0x31, 0x48, 0x05, 0xfc, 0x05, 0xa6, 0x3d, 0x00, 0xa5, 0xb5, 0x97, 0x85,
	0x7b, 0xa0, 0x68, 0xf6, 0x7a, 0xc3, 0xfe, 0xc9, 0xeb, 0xd3, 0x5e, 0x35, 0x03, 0x01, 0xc8, 0x77,
	0x06, 0xc7, 0x1d, 0xeb, 0x5d, 0x55, 0x82, 0x25, 0xb0, 0xdb, 0x79, 0xf1, 0xa6, 0x97, 0x04, 0x59,
	0xb3, 0x7f, 0x3d, 0x53, 0xa5, 0x9b, 0x99, 0x2a, 0xfd, 0x9c, 0xa9, 0xd2, 0x97, 0xb9, 0x9a, 0xb9,
	0x99, 0xab, 0x99, 0xef, 0x73, 0x35, 0xf3, 0x5e, 0x5f, 0xdb, 0x9c, 0x35, 0x85, 0x06, 0x9f, 0xd0,
	0xb7, 0x94, 0xba, 0xc6, 0x44, 0x2c, 0xaf, 0xd8, 0x22, 0x3b, 0xcf, 0x77, 0xf8, 0xfe, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x76, 0x26, 0x9c, 0xdb, 0x55, 0x04, 0x00, 0x00,
}

func (m *ApiaryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiaryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiaryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxCountHoney != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.MaxCountHoney))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCountBees != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.MaxCountBees))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiaries(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CycleBeesHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CycleBeesHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CycleBeesHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bees) > 0 {
		dAtA2 := make([]byte, len(m.Bees)*10)
		var j1 int
		for _, num := range m.Bees {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApiaries(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Block != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Apiaries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Apiaries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Apiaries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CycleBeesHistory) > 0 {
		for iNdEx := len(m.CycleBeesHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CycleBeesHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiaries(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CycleStartBlock != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.CycleStartBlock))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApiaries(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.CountBees != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.CountBees))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApiaries(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ApiaryType != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.ApiaryType))
		i--
		dAtA[i] = 0x18
	}
	if m.BearOwner != nil {
		{
			size, err := m.BearOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiaries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiaries(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiaries(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiaryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovApiaries(uint64(l))
		}
	}
	if m.MaxCountBees != 0 {
		n += 1 + sovApiaries(uint64(m.MaxCountBees))
	}
	if m.MaxCountHoney != 0 {
		n += 1 + sovApiaries(uint64(m.MaxCountHoney))
	}
	return n
}

func (m *CycleBeesHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovApiaries(uint64(m.Block))
	}
	if len(m.Bees) > 0 {
		l = 0
		for _, e := range m.Bees {
			l += sovApiaries(uint64(e))
		}
		n += 1 + sovApiaries(uint64(l)) + l
	}
	return n
}

func (m *Apiaries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiaries(uint64(m.Id))
	}
	if m.BearOwner != nil {
		l = m.BearOwner.Size()
		n += 1 + l + sovApiaries(uint64(l))
	}
	if m.ApiaryType != 0 {
		n += 1 + sovApiaries(uint64(m.ApiaryType))
	}
	l = m.Position.Size()
	n += 1 + l + sovApiaries(uint64(l))
	if m.CountBees != 0 {
		n += 1 + sovApiaries(uint64(m.CountBees))
	}
	l = m.Params.Size()
	n += 1 + l + sovApiaries(uint64(l))
	if m.CycleStartBlock != 0 {
		n += 1 + sovApiaries(uint64(m.CycleStartBlock))
	}
	if len(m.CycleBeesHistory) > 0 {
		for _, e := range m.CycleBeesHistory {
			l = e.Size()
			n += 1 + l + sovApiaries(uint64(l))
		}
	}
	return n
}

func sovApiaries(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiaries(x uint64) (n int) {
	return sovApiaries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiaryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiaryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiaryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountBees", wireType)
			}
			m.MaxCountBees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountBees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountHoney", wireType)
			}
			m.MaxCountHoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountHoney |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiaries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiaries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CycleBeesHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CycleBeesHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CycleBeesHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiaries
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bees = append(m.Bees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiaries
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApiaries
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApiaries
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bees) == 0 {
					m.Bees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiaries
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bees = append(m.Bees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bees", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiaries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiaries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Apiaries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Apiaries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Apiaries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BearOwner == nil {
				m.BearOwner = &BearOwner{}
			}
			if err := m.BearOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiaryType", wireType)
			}
			m.ApiaryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiaryType |= Apiaries_ApiaryTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountBees", wireType)
			}
			m.CountBees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountBees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleStartBlock", wireType)
			}
			m.CycleStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleBeesHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleBeesHistory = append(m.CycleBeesHistory, CycleBeesHistory{})
			if err := m.CycleBeesHistory[len(m.CycleBeesHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiaries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiaries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiaries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiaries
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiaries
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiaries
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiaries        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiaries          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiaries = fmt.Errorf("proto: unexpected end of group")
)
