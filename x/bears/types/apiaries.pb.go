// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/apiaries.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Apiaries_ApiaryTypes int32

const (
	Apiaries_BEE_HOUSE Apiaries_ApiaryTypes = 0
	Apiaries_APIARY    Apiaries_ApiaryTypes = 1
	Apiaries_ALVEARY   Apiaries_ApiaryTypes = 2
)

var Apiaries_ApiaryTypes_name = map[int32]string{
	0: "BEE_HOUSE",
	1: "APIARY",
	2: "ALVEARY",
}

var Apiaries_ApiaryTypes_value = map[string]int32{
	"BEE_HOUSE": 0,
	"APIARY":    1,
	"ALVEARY":   2,
}

func (x Apiaries_ApiaryTypes) String() string {
	return proto.EnumName(Apiaries_ApiaryTypes_name, int32(x))
}

func (Apiaries_ApiaryTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{0, 0}
}

type Apiaries struct {
	Id         uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BearOwner  *BearOwner           `protobuf:"bytes,2,opt,name=bearOwner,proto3" json:"bearOwner,omitempty"`
	ApiaryType Apiaries_ApiaryTypes `protobuf:"varint,3,opt,name=apiaryType,proto3,enum=MonetaToday.honeywood.bears.Apiaries_ApiaryTypes" json:"apiaryType,omitempty"`
	Position   ItemPosition         `protobuf:"bytes,4,opt,name=position,proto3" json:"position"`
}

func (m *Apiaries) Reset()         { *m = Apiaries{} }
func (m *Apiaries) String() string { return proto.CompactTextString(m) }
func (*Apiaries) ProtoMessage()    {}
func (*Apiaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18fa6f115c398f1, []int{0}
}
func (m *Apiaries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Apiaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Apiaries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Apiaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Apiaries.Merge(m, src)
}
func (m *Apiaries) XXX_Size() int {
	return m.Size()
}
func (m *Apiaries) XXX_DiscardUnknown() {
	xxx_messageInfo_Apiaries.DiscardUnknown(m)
}

var xxx_messageInfo_Apiaries proto.InternalMessageInfo

func (m *Apiaries) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Apiaries) GetBearOwner() *BearOwner {
	if m != nil {
		return m.BearOwner
	}
	return nil
}

func (m *Apiaries) GetApiaryType() Apiaries_ApiaryTypes {
	if m != nil {
		return m.ApiaryType
	}
	return Apiaries_BEE_HOUSE
}

func (m *Apiaries) GetPosition() ItemPosition {
	if m != nil {
		return m.Position
	}
	return ItemPosition{}
}

func init() {
	proto.RegisterEnum("MonetaToday.honeywood.bears.Apiaries_ApiaryTypes", Apiaries_ApiaryTypes_name, Apiaries_ApiaryTypes_value)
	proto.RegisterType((*Apiaries)(nil), "MonetaToday.honeywood.bears.Apiaries")
}

func init() { proto.RegisterFile("bears/apiaries.proto", fileDescriptor_e18fa6f115c398f1) }

var fileDescriptor_e18fa6f115c398f1 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x4a, 0x4d, 0x2c,
	0x2a, 0xd6, 0x4f, 0x2c, 0xc8, 0x4c, 0x2c, 0xca, 0x4c, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0xf6, 0xcd, 0xcf, 0x4b, 0x2d, 0x49, 0x0c, 0xc9, 0x4f, 0x49, 0xac, 0xd4, 0xcb, 0xc8,
	0xcf, 0x4b, 0xad, 0x2c, 0xcf, 0xcf, 0x4f, 0xd1, 0x03, 0xab, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf,
	0x07, 0xab, 0xd3, 0x07, 0xb1, 0x20, 0x5a, 0xa4, 0x84, 0x20, 0x06, 0xa5, 0x65, 0xa6, 0xe6, 0xa4,
	0x40, 0x8d, 0x91, 0x12, 0x84, 0x88, 0x81, 0x49, 0x88, 0x90, 0xd2, 0x76, 0x26, 0x2e, 0x0e, 0x47,
	0xa8, 0x65, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c,
	0x99, 0x29, 0x42, 0x2e, 0x5c, 0x9c, 0x20, 0xb5, 0xfe, 0xe5, 0x79, 0xa9, 0x45, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0xdc, 0x46, 0x6a, 0x7a, 0x78, 0x9c, 0xa2, 0xe7, 0x04, 0x53, 0x1d, 0x84, 0xd0, 0x28,
	0x14, 0xc8, 0xc5, 0x05, 0xf6, 0x4e, 0x65, 0x48, 0x65, 0x41, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06,
	0x9f, 0x91, 0x21, 0x5e, 0x63, 0x60, 0x0e, 0x82, 0x30, 0xc0, 0xfa, 0x8a, 0x83, 0x90, 0x0c, 0x11,
	0xf2, 0xe6, 0xe2, 0x28, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x01, 0xbb, 0x4b,
	0x13, 0xaf, 0x81, 0x9e, 0x25, 0xa9, 0xb9, 0x01, 0x50, 0x0d, 0x4e, 0x2c, 0x27, 0xee, 0xc9, 0x33,
	0x04, 0xc1, 0x0d, 0x50, 0x32, 0xe5, 0xe2, 0x46, 0xb2, 0x47, 0x88, 0x97, 0x8b, 0xd3, 0xc9, 0xd5,
	0x35, 0xde, 0xc3, 0x3f, 0x34, 0xd8, 0x55, 0x80, 0x41, 0x88, 0x8b, 0x8b, 0xcd, 0x31, 0xc0, 0xd3,
	0x31, 0x28, 0x52, 0x80, 0x51, 0x88, 0x9b, 0x8b, 0xdd, 0xd1, 0x27, 0xcc, 0x15, 0xc4, 0x61, 0x72,
	0xf2, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xbd, 0xf4, 0xcc, 0x92,
	0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x24, 0x57, 0xe9, 0x7b, 0x80, 0x5c, 0x15, 0x9e,
	0x9f, 0x9f, 0xa2, 0x5f, 0x01, 0x89, 0x03, 0xfd, 0x12, 0x90, 0x8d, 0x49, 0x6c, 0xe0, 0xa8, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x58, 0xe3, 0x80, 0xb1, 0xfc, 0x01, 0x00, 0x00,
}

func (m *Apiaries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Apiaries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Apiaries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApiaries(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ApiaryType != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.ApiaryType))
		i--
		dAtA[i] = 0x18
	}
	if m.BearOwner != nil {
		{
			size, err := m.BearOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiaries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiaries(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiaries(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiaries(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Apiaries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiaries(uint64(m.Id))
	}
	if m.BearOwner != nil {
		l = m.BearOwner.Size()
		n += 1 + l + sovApiaries(uint64(l))
	}
	if m.ApiaryType != 0 {
		n += 1 + sovApiaries(uint64(m.ApiaryType))
	}
	l = m.Position.Size()
	n += 1 + l + sovApiaries(uint64(l))
	return n
}

func sovApiaries(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiaries(x uint64) (n int) {
	return sovApiaries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Apiaries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Apiaries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Apiaries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BearOwner == nil {
				m.BearOwner = &BearOwner{}
			}
			if err := m.BearOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiaryType", wireType)
			}
			m.ApiaryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiaryType |= Apiaries_ApiaryTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiaries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiaries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiaries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiaries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiaries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiaries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiaries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiaries
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiaries
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiaries
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiaries        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiaries          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiaries = fmt.Errorf("proto: unexpected end of group")
)
