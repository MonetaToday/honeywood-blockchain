// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/air_info.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AirHistory struct {
	Height  uint64                                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Count   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=count,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"count"`
	Quality github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=quality,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quality"`
}

func (m *AirHistory) Reset()         { *m = AirHistory{} }
func (m *AirHistory) String() string { return proto.CompactTextString(m) }
func (*AirHistory) ProtoMessage()    {}
func (*AirHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_9324530f7491d935, []int{0}
}
func (m *AirHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirHistory.Merge(m, src)
}
func (m *AirHistory) XXX_Size() int {
	return m.Size()
}
func (m *AirHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_AirHistory.DiscardUnknown(m)
}

var xxx_messageInfo_AirHistory proto.InternalMessageInfo

func (m *AirHistory) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type AirInfo struct {
	History []AirHistory `protobuf:"bytes,1,rep,name=history,proto3" json:"history"`
}

func (m *AirInfo) Reset()         { *m = AirInfo{} }
func (m *AirInfo) String() string { return proto.CompactTextString(m) }
func (*AirInfo) ProtoMessage()    {}
func (*AirInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9324530f7491d935, []int{1}
}
func (m *AirInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirInfo.Merge(m, src)
}
func (m *AirInfo) XXX_Size() int {
	return m.Size()
}
func (m *AirInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AirInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AirInfo proto.InternalMessageInfo

func (m *AirInfo) GetHistory() []AirHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func init() {
	proto.RegisterType((*AirHistory)(nil), "MonetaToday.honeywood.bears.AirHistory")
	proto.RegisterType((*AirInfo)(nil), "MonetaToday.honeywood.bears.AirInfo")
}

func init() { proto.RegisterFile("bears/air_info.proto", fileDescriptor_9324530f7491d935) }

var fileDescriptor_9324530f7491d935 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x4a, 0x4d, 0x2c,
	0x2a, 0xd6, 0x4f, 0xcc, 0x2c, 0x8a, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0xf6, 0xcd, 0xcf, 0x4b, 0x2d, 0x49, 0x0c, 0xc9, 0x4f, 0x49, 0xac, 0xd4, 0xcb, 0xc8,
	0xcf, 0x4b, 0xad, 0x2c, 0xcf, 0xcf, 0x4f, 0xd1, 0x03, 0xab, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf,
	0x07, 0xab, 0xd3, 0x07, 0xb1, 0x20, 0x5a, 0x94, 0xb6, 0x30, 0x72, 0x71, 0x39, 0x66, 0x16, 0x79,
	0x64, 0x16, 0x97, 0xe4, 0x17, 0x55, 0x0a, 0x89, 0x71, 0xb1, 0x65, 0xa4, 0x66, 0xa6, 0x67, 0x94,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x79, 0x42, 0x2e, 0x5c, 0xac, 0xc9, 0xf9, 0xa5,
	0x79, 0x25, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x7a, 0x27, 0xee, 0xc9, 0x33, 0xdc, 0xba,
	0x27, 0xaf, 0x96, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9c, 0x5f,
	0x9c, 0x9b, 0x5f, 0x0c, 0xa5, 0x74, 0x8b, 0x53, 0xb2, 0xf5, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0xf5,
	0x5c, 0x52, 0x93, 0x83, 0x20, 0x9a, 0x85, 0x3c, 0xb8, 0xd8, 0x0b, 0x4b, 0x13, 0x73, 0x32, 0x4b,
	0x2a, 0x25, 0x98, 0xc9, 0x32, 0x07, 0xa6, 0x5d, 0x29, 0x88, 0x8b, 0xdd, 0x31, 0xb3, 0xc8, 0x33,
	0x2f, 0x2d, 0x5f, 0xc8, 0x9d, 0x8b, 0x3d, 0x03, 0xe2, 0x7a, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e,
	0x23, 0x75, 0x3d, 0x3c, 0xc1, 0xa0, 0x87, 0xf0, 0xac, 0x13, 0x0b, 0xc8, 0xf6, 0x20, 0x98, 0x6e,
	0x27, 0x8f, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2,
	0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x43, 0x72, 0x1e,
	0x92, 0xd9, 0xfa, 0x1e, 0x20, 0xb3, 0xc3, 0xf3, 0xf3, 0x53, 0xf4, 0x2b, 0xf4, 0x21, 0x11, 0x02,
	0x76, 0x6a, 0x12, 0x1b, 0x38, 0x6c, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x4b, 0xe7,
	0xcb, 0xa6, 0x01, 0x00, 0x00,
}

func (m *AirHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quality.Size()
		i -= size
		if _, err := m.Quality.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Count.Size()
		i -= size
		if _, err := m.Count.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintAirInfo(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAirInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAirInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovAirInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AirHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovAirInfo(uint64(m.Height))
	}
	l = m.Count.Size()
	n += 1 + l + sovAirInfo(uint64(l))
	l = m.Quality.Size()
	n += 1 + l + sovAirInfo(uint64(l))
	return n
}

func (m *AirInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovAirInfo(uint64(l))
		}
	}
	return n
}

func sovAirInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirInfo(x uint64) (n int) {
	return sovAirInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AirHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Count.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, AirHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAirInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAirInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAirInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAirInfo = fmt.Errorf("proto: unexpected end of group")
)
