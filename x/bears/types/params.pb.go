// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bears/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	BurnRate                github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,1,opt,name=burn_rate,json=burnRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_rate" yaml:"burn_rate"`
	PriceSetName            github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=price_set_name,json=priceSetName,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_set_name" yaml:"price_set_name"`
	PriceTile               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price_tile,json=priceTile,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_tile" yaml:"price_tile"`
	PriceTree               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=price_tree,json=priceTree,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_tree" yaml:"price_tree"`
	RewardTree              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=reward_tree,json=rewardTree,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_tree" yaml:"reward_tree"`
	PriceDecorationFlowers  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=price_decoration_flowers,json=priceDecorationFlowers,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_decoration_flowers" yaml:"price_decoration_flowers"`
	PriceDecorationFlag     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=price_decoration_flag,json=priceDecorationFlag,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_decoration_flag" yaml:"price_decoration_flag"`
	PriceDecorationLamp     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=price_decoration_lamp,json=priceDecorationLamp,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_decoration_lamp" yaml:"price_decoration_lamp"`
	PriceDecorationGreenBee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=price_decoration_green_bee,json=priceDecorationGreenBee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_decoration_green_bee" yaml:"price_decoration_green_bee"`
	PriceDecorationFountain github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=price_decoration_fountain,json=priceDecorationFountain,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price_decoration_fountain" yaml:"price_decoration_fountain"`
	ApiaryBeeHouseParams    ApiaryParams                             `protobuf:"bytes,11,opt,name=apiary_bee_house_params,json=apiaryBeeHouseParams,proto3" json:"apiary_bee_house_params" yaml:"apiary_bee_house_params"`
	ApiaryApiaryParams      ApiaryParams                             `protobuf:"bytes,12,opt,name=apiary_apiary_params,json=apiaryApiaryParams,proto3" json:"apiary_apiary_params" yaml:"apiary_apiary_params"`
	ApiaryAlvearyParams     ApiaryParams                             `protobuf:"bytes,13,opt,name=apiary_alveary_params,json=apiaryAlvearyParams,proto3" json:"apiary_alveary_params" yaml:"apiary_alveary_params"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ad25feeeed35bd0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPriceSetName() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceSetName
	}
	return nil
}

func (m *Params) GetPriceTile() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceTile
	}
	return nil
}

func (m *Params) GetPriceTree() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceTree
	}
	return nil
}

func (m *Params) GetRewardTree() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardTree
	}
	return nil
}

func (m *Params) GetPriceDecorationFlowers() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceDecorationFlowers
	}
	return nil
}

func (m *Params) GetPriceDecorationFlag() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceDecorationFlag
	}
	return nil
}

func (m *Params) GetPriceDecorationLamp() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceDecorationLamp
	}
	return nil
}

func (m *Params) GetPriceDecorationGreenBee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceDecorationGreenBee
	}
	return nil
}

func (m *Params) GetPriceDecorationFountain() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PriceDecorationFountain
	}
	return nil
}

func (m *Params) GetApiaryBeeHouseParams() ApiaryParams {
	if m != nil {
		return m.ApiaryBeeHouseParams
	}
	return ApiaryParams{}
}

func (m *Params) GetApiaryApiaryParams() ApiaryParams {
	if m != nil {
		return m.ApiaryApiaryParams
	}
	return ApiaryParams{}
}

func (m *Params) GetApiaryAlvearyParams() ApiaryParams {
	if m != nil {
		return m.ApiaryAlvearyParams
	}
	return ApiaryParams{}
}

func init() {
	proto.RegisterType((*Params)(nil), "MonetaToday.honeywood.bears.Params")
}

func init() { proto.RegisterFile("bears/params.proto", fileDescriptor_8ad25feeeed35bd0) }

var fileDescriptor_8ad25feeeed35bd0 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0xd5, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0x07, 0xf0, 0x1d, 0x41, 0x64, 0x67, 0x91, 0xe8, 0x00, 0x52, 0xc0, 0xb4, 0x6b, 0x35, 0x64,
	0x3d, 0xd8, 0x06, 0xbc, 0x71, 0xb3, 0x22, 0x62, 0xa2, 0x86, 0x2c, 0x18, 0x13, 0x2f, 0xcd, 0x74,
	0xf7, 0x59, 0x1a, 0xb7, 0x9d, 0x66, 0xda, 0x05, 0xf7, 0xa4, 0xd1, 0x8b, 0xf1, 0xe4, 0xd1, 0x9b,
	0x1e, 0x8d, 0xc6, 0xef, 0xc1, 0x91, 0xa3, 0xf1, 0xb0, 0x1a, 0xf0, 0x13, 0xf0, 0x09, 0x4c, 0x3b,
	0x23, 0xe9, 0xba, 0xac, 0xb5, 0xec, 0xa9, 0xa5, 0x33, 0xef, 0xff, 0x7e, 0x74, 0x76, 0xf7, 0x61,
	0xe2, 0x00, 0xe5, 0x91, 0x19, 0x52, 0x4e, 0xfd, 0xc8, 0x08, 0x39, 0x8b, 0x19, 0x59, 0x78, 0xc0,
	0x02, 0x88, 0xe9, 0x16, 0x6b, 0xd2, 0x8e, 0xb1, 0xcd, 0x02, 0xe8, 0xec, 0x32, 0xd6, 0x34, 0xd2,
	0x9d, 0xf3, 0xd3, 0x2e, 0x73, 0x59, 0xba, 0xcf, 0x4c, 0xee, 0x44, 0xc9, 0xbc, 0xda, 0x60, 0x91,
	0xcf, 0x22, 0xd3, 0xa1, 0x11, 0x98, 0x3b, 0x4b, 0x0e, 0xc4, 0x74, 0xc9, 0x6c, 0x30, 0x2f, 0x90,
	0xeb, 0xd3, 0xa2, 0x0d, 0x0d, 0x3d, 0xca, 0x3d, 0x90, 0x8d, 0xf4, 0x5f, 0x93, 0x78, 0x6c, 0x23,
	0xed, 0x4c, 0x6c, 0x5c, 0x76, 0xda, 0x3c, 0xb0, 0x39, 0x8d, 0x41, 0x41, 0x55, 0x54, 0x2b, 0x5b,
	0xd6, 0x5e, 0x57, 0x2b, 0x7d, 0xef, 0x6a, 0x8b, 0xae, 0x17, 0x6f, 0xb7, 0x1d, 0xa3, 0xc1, 0x7c,
	0x53, 0xb6, 0x11, 0x97, 0x1b, 0x51, 0xf3, 0x99, 0x19, 0x77, 0x42, 0x88, 0x8c, 0x55, 0x68, 0x1c,
	0x75, 0xb5, 0x0b, 0x1d, 0xea, 0xb7, 0x56, 0xf4, 0xe3, 0x20, 0xbd, 0x3e, 0x9e, 0xdc, 0xd7, 0x69,
	0x0c, 0xe4, 0x2d, 0xc2, 0x93, 0x21, 0xf7, 0x1a, 0x60, 0x47, 0x10, 0xdb, 0x01, 0xf5, 0x41, 0x39,
	0x53, 0x1d, 0xa9, 0x55, 0x96, 0xe7, 0x0c, 0x91, 0x66, 0x24, 0x76, 0x43, 0xda, 0x8d, 0xdb, 0xcc,
	0x0b, 0xac, 0x7b, 0x89, 0xe0, 0xa8, 0xab, 0xcd, 0x88, 0xdc, 0xde, 0x72, 0xfd, 0xf3, 0x0f, 0xad,
	0xf6, 0x1f, 0xb4, 0x24, 0x29, 0xaa, 0x4f, 0xa4, 0xc5, 0x9b, 0x10, 0x3f, 0xa4, 0x3e, 0x90, 0x17,
	0x18, 0x8b, 0xb0, 0xd8, 0x6b, 0x81, 0x32, 0x92, 0xe7, 0xb8, 0x23, 0x1d, 0x17, 0xb3, 0x8e, 0xa4,
	0xb4, 0x98, 0xa1, 0x9c, 0x16, 0x6e, 0x79, 0xad, 0x2c, 0x80, 0x03, 0x28, 0xa3, 0xa7, 0x03, 0x70,
	0x38, 0x1d, 0x80, 0x03, 0x90, 0x57, 0x08, 0x57, 0x38, 0xec, 0x52, 0xde, 0x14, 0x84, 0xb3, 0x79,
	0x84, 0x35, 0x49, 0x20, 0x82, 0x90, 0xa9, 0x2d, 0x66, 0xc0, 0xa2, 0x32, 0x45, 0x7c, 0x42, 0x58,
	0x11, 0xff, 0x4b, 0x13, 0x1a, 0x8c, 0xd3, 0xd8, 0x63, 0x81, 0xfd, 0xb4, 0xc5, 0x76, 0x81, 0x47,
	0xca, 0x58, 0x9e, 0x68, 0x53, 0x8a, 0xb4, 0xec, 0x4b, 0xe9, 0x0f, 0x2a, 0xc6, 0xbb, 0x94, 0xc6,
	0xac, 0x1e, 0xa7, 0xac, 0x89, 0x10, 0xf2, 0x01, 0xe1, 0x99, 0x13, 0x3a, 0x50, 0x57, 0x39, 0x97,
	0xe7, 0xdc, 0x90, 0xce, 0xcb, 0x03, 0x9d, 0xd4, 0x2d, 0x86, 0x9c, 0xea, 0x43, 0x52, 0xf7, 0x64,
	0x61, 0x8b, 0xfa, 0xa1, 0x32, 0x3e, 0xac, 0x30, 0x49, 0x19, 0x4e, 0x78, 0x9f, 0xfa, 0x21, 0xf9,
	0x8a, 0xf0, 0x7c, 0x5f, 0xb6, 0xcb, 0x01, 0x02, 0xdb, 0x01, 0x50, 0xca, 0x79, 0xcc, 0x47, 0x92,
	0x79, 0x65, 0x00, 0xf3, 0x38, 0xaa, 0x98, 0x75, 0xf6, 0x2f, 0xeb, 0xdd, 0x24, 0xc6, 0x02, 0x20,
	0x5f, 0x10, 0x9e, 0xeb, 0x3f, 0x2d, 0xd6, 0x0e, 0x62, 0xea, 0x05, 0x0a, 0xce, 0xe3, 0x6e, 0x49,
	0x6e, 0x75, 0xd0, 0xb9, 0xcb, 0xa4, 0xe1, 0xb4, 0x6b, 0x32, 0x85, 0xbc, 0x41, 0x78, 0x36, 0xfd,
	0x7d, 0xef, 0x24, 0xaf, 0xc0, 0xde, 0x66, 0xed, 0x08, 0x6c, 0x31, 0x57, 0x94, 0x4a, 0x15, 0xd5,
	0x2a, 0xcb, 0xd7, 0x8d, 0x7f, 0x0c, 0x16, 0xe3, 0x56, 0x5a, 0x2b, 0xc6, 0x81, 0xb5, 0x28, 0xed,
	0xaa, 0xb0, 0x0f, 0xc8, 0xd5, 0xeb, 0xd3, 0x62, 0xc5, 0x02, 0x58, 0x4f, 0x9e, 0xcb, 0x61, 0xf2,
	0x12, 0x61, 0xb9, 0x60, 0xcb, 0x8b, 0x74, 0x4c, 0x14, 0x75, 0x5c, 0x95, 0x8e, 0x85, 0x1e, 0x47,
	0x4f, 0xa8, 0x5e, 0x27, 0xe2, 0xef, 0x6c, 0x21, 0x79, 0x8d, 0xf0, 0xcc, 0x9f, 0xdd, 0xad, 0x1d,
	0xc8, 0x18, 0xce, 0x17, 0x35, 0x5c, 0xeb, 0xfd, 0x76, 0x9c, 0x98, 0xaa, 0xd7, 0xa7, 0x24, 0x42,
	0x3c, 0x16, 0xa5, 0x2b, 0xa3, 0xef, 0x3f, 0x6a, 0x25, 0x6b, 0x7d, 0xef, 0x40, 0x45, 0xfb, 0x07,
	0x2a, 0xfa, 0x79, 0xa0, 0xa2, 0x77, 0x87, 0x6a, 0x69, 0xff, 0x50, 0x2d, 0x7d, 0x3b, 0x54, 0x4b,
	0x4f, 0x8c, 0xcc, 0xb1, 0x67, 0x3c, 0xe6, 0x7a, 0xe2, 0x79, 0xcc, 0x58, 0xd3, 0x7c, 0x6e, 0x8a,
	0xc9, 0x9d, 0x7e, 0x04, 0x9c, 0xb1, 0x74, 0x6e, 0xdf, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x51,
	0x62, 0x79, 0x1a, 0x36, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApiaryAlvearyParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.ApiaryApiaryParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.ApiaryBeeHouseParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.PriceDecorationFountain) > 0 {
		for iNdEx := len(m.PriceDecorationFountain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceDecorationFountain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PriceDecorationGreenBee) > 0 {
		for iNdEx := len(m.PriceDecorationGreenBee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceDecorationGreenBee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PriceDecorationLamp) > 0 {
		for iNdEx := len(m.PriceDecorationLamp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceDecorationLamp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PriceDecorationFlag) > 0 {
		for iNdEx := len(m.PriceDecorationFlag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceDecorationFlag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PriceDecorationFlowers) > 0 {
		for iNdEx := len(m.PriceDecorationFlowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceDecorationFlowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RewardTree) > 0 {
		for iNdEx := len(m.RewardTree) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardTree[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PriceTree) > 0 {
		for iNdEx := len(m.PriceTree) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceTree[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PriceTile) > 0 {
		for iNdEx := len(m.PriceTile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceTile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PriceSetName) > 0 {
		for iNdEx := len(m.PriceSetName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceSetName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.BurnRate.Size()
		i -= size
		if _, err := m.BurnRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.PriceSetName) > 0 {
		for _, e := range m.PriceSetName {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceTile) > 0 {
		for _, e := range m.PriceTile {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceTree) > 0 {
		for _, e := range m.PriceTree {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.RewardTree) > 0 {
		for _, e := range m.RewardTree {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceDecorationFlowers) > 0 {
		for _, e := range m.PriceDecorationFlowers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceDecorationFlag) > 0 {
		for _, e := range m.PriceDecorationFlag {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceDecorationLamp) > 0 {
		for _, e := range m.PriceDecorationLamp {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceDecorationGreenBee) > 0 {
		for _, e := range m.PriceDecorationGreenBee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PriceDecorationFountain) > 0 {
		for _, e := range m.PriceDecorationFountain {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.ApiaryBeeHouseParams.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ApiaryApiaryParams.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ApiaryAlvearyParams.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSetName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceSetName = append(m.PriceSetName, types.Coin{})
			if err := m.PriceSetName[len(m.PriceSetName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceTile = append(m.PriceTile, types.Coin{})
			if err := m.PriceTile[len(m.PriceTile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceTree = append(m.PriceTree, types.Coin{})
			if err := m.PriceTree[len(m.PriceTree)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTree = append(m.RewardTree, types.Coin{})
			if err := m.RewardTree[len(m.RewardTree)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecorationFlowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDecorationFlowers = append(m.PriceDecorationFlowers, types.Coin{})
			if err := m.PriceDecorationFlowers[len(m.PriceDecorationFlowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecorationFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDecorationFlag = append(m.PriceDecorationFlag, types.Coin{})
			if err := m.PriceDecorationFlag[len(m.PriceDecorationFlag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecorationLamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDecorationLamp = append(m.PriceDecorationLamp, types.Coin{})
			if err := m.PriceDecorationLamp[len(m.PriceDecorationLamp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecorationGreenBee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDecorationGreenBee = append(m.PriceDecorationGreenBee, types.Coin{})
			if err := m.PriceDecorationGreenBee[len(m.PriceDecorationGreenBee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecorationFountain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDecorationFountain = append(m.PriceDecorationFountain, types.Coin{})
			if err := m.PriceDecorationFountain[len(m.PriceDecorationFountain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiaryBeeHouseParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApiaryBeeHouseParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiaryApiaryParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApiaryApiaryParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiaryAlvearyParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApiaryAlvearyParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
